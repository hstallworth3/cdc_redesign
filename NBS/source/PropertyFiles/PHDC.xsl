<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:n1="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc" xmlns:in="urn:lantana-com:inline-variable-data" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">	<xsl:output method="html" indent="yes" version="4.01" encoding="ISO-8859-1" doctype-system="http://www.w3.org/TR/html4/strict.dtd" doctype-public="-//W3C//DTD HTML 4.01//EN"/>	<xsl:param name="limit-external-images" select="'yes'"/>	<!-- A vertical bar separated list of URI prefixes, such as "http://www.example.com|https://www.example.com" -->	<xsl:param name="external-image-whitelist"/>	<!-- global variable title -->	<xsl:variable name="title">		<xsl:choose>			<xsl:when test="string-length(/n1:ClinicalDocument/n1:title)  &gt;= 1">				<xsl:value-of select="/n1:ClinicalDocument/n1:title"/>			</xsl:when>			<xsl:when test="/n1:ClinicalDocument/n1:code/@displayName">				<xsl:value-of select="/n1:ClinicalDocument/n1:code/@displayName"/>			</xsl:when>			<xsl:otherwise>				<xsl:text>Clinical Document</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:variable>	<!-- Main -->	<xsl:template match="/">		<xsl:apply-templates select="n1:ClinicalDocument"/>	</xsl:template>	<!-- produce browser rendered, human readable clinical document -->	<xsl:template match="n1:ClinicalDocument">		<html>			<head>				<xsl:comment> Do NOT edit this HTML directly: it was generated via an XSLT transformation from a CDA Release 2 XML document. </xsl:comment>				<title>					<xsl:value-of select="$title"/>				</title>				<xsl:call-template name="addNBSCSS"/>			</head>			<body>				<div class="sect" id="case_header">					<table class="sectHeader1">						<tr>							<td class="sectName" id="pageTop">								<xsl:value-of select="$title"/>							</td>							<td/>						</tr>					</table>				</div>				<div class="view" id="sectionLink" style="text-align:center;">					<table class="sectionsToggler" style="width:100%;">						<tr>							<td>								<ul class="horizontalList">									<b>Go to: </b>									<a href="javascript:gotoSection('sect_viewSendingSystemInformation')">SENDING SYSTEM INFORMATION</a> | <a href="javascript:gotoSection('sect_viewDocumentHeader')">PATIENT INFORMATION</a> | 										<xsl:if test="not(//n1:nonXMLBody)">										<xsl:if test="count(/n1:ClinicalDocument/n1:component/n1:structuredBody/n1:component[n1:section]) &gt; 0">											<xsl:call-template name="make-tableofcontents"/>										</xsl:if>									</xsl:if>								</ul>							</td>						</tr>					</table>				</div>				<div class="sect" id="sect_viewSendingSystemInformation">					<table class="sectHeader">						<tr>							<td class="sectName">SENDING SYSTEM INFORMATION</td>							<td style="text-align:right;">								<a href="#pageTop" class="backToTopLink">Back to top </a>							</td>						</tr>					</table>				</div>				<xsl:call-template name="sendingSystemInfo"/>				<div class="sect" id="sect_viewDocumentHeader">					<table class="sectHeader">						<tr>							<td class="sectName">PATIENT INFORMATION</td>							<td style="text-align:right;">								<a href="#pageTop" class="backToTopLink">Back to top </a>							</td>						</tr>					</table>				</div>				<xsl:call-template name="show-patient"/>				<xsl:apply-templates select="n1:component/n1:structuredBody|n1:component/n1:nonXMLBody"/>				<br/>				<br/>			</body>		</html>	</xsl:template>	<!-- generate table of contents -->	<xsl:template name="make-tableofcontents">		<xsl:for-each select="n1:component/n1:structuredBody/n1:component/n1:section">			<xsl:if test="n1:code/@code!='123-4567'">				<a href="#{generate-id(n1:title)}">					<xsl:value-of select="n1:title"/>				</a> | 			</xsl:if>		</xsl:for-each>	</xsl:template>	<!-- author -->	<xsl:template name="author">		<xsl:if test="n1:author">			<xsl:for-each select="n1:author/n1:assignedAuthor">				<xsl:choose>					<xsl:when test="n1:assignedPerson/n1:name">						<xsl:call-template name="show-name">							<xsl:with-param name="name" select="n1:assignedPerson/n1:name"/>						</xsl:call-template>						<xsl:if test="n1:representedOrganization">							<xsl:text>, </xsl:text>							<xsl:call-template name="show-name">								<xsl:with-param name="name" select="n1:representedOrganization/n1:name"/>							</xsl:call-template>						</xsl:if>					</xsl:when>					<xsl:when test="n1:assignedAuthoringDevice/n1:softwareName">						<xsl:value-of select="n1:assignedAuthoringDevice/n1:softwareName"/>					</xsl:when>					<xsl:when test="n1:representedOrganization">						<xsl:call-template name="show-name">							<xsl:with-param name="name" select="n1:representedOrganization/n1:name"/>						</xsl:call-template>						<br/>						<xsl:call-template name="show-contactInfo">							<xsl:with-param name="contact" select="n1:representedOrganization"/>						</xsl:call-template>					</xsl:when>					<xsl:otherwise>						<xsl:for-each select="n1:id">							<xsl:call-template name="show-id">								<xsl:with-param name="id" select="."/>							</xsl:call-template>							<br/>						</xsl:for-each>					</xsl:otherwise>				</xsl:choose>				<br/>				<xsl:if test="n1:addr | n1:telecom">					<xsl:call-template name="show-contactInfo">						<xsl:with-param name="contact" select="."/>					</xsl:call-template>				</xsl:if>			</xsl:for-each>		</xsl:if>	</xsl:template>	<!--  authenticator -->	<xsl:template name="authenticator">		<xsl:if test="n1:authenticator">			<table class="header_table">				<tbody>					<tr>						<xsl:for-each select="n1:authenticator">							<tr>								<td class="td_header_role_name">									<span class="td_label">										<xsl:text>Signed </xsl:text>									</span>								</td>								<td class="td_header_role_value">									<xsl:call-template name="show-name">										<xsl:with-param name="name" select="n1:assignedEntity/n1:assignedPerson/n1:name"/>									</xsl:call-template>									<xsl:text> at </xsl:text>									<xsl:call-template name="show-time">										<xsl:with-param name="datetime" select="n1:time"/>									</xsl:call-template>								</td>							</tr>							<xsl:if test="n1:assignedEntity/n1:addr | n1:assignedEntity/n1:telecom">								<tr>									<td class="td_header_role_name">										<span class="td_label">Contact info</span>									</td>									<td class="td_header_role_value">										<xsl:call-template name="show-contactInfo">											<xsl:with-param name="contact" select="n1:assignedEntity"/>										</xsl:call-template>									</td>								</tr>							</xsl:if>						</xsl:for-each>					</tr>				</tbody>			</table>		</xsl:if>	</xsl:template>	<!-- custodian -->	<xsl:template name="custodian">		<xsl:if test="n1:custodian">			<table class="header_table">				<tbody>					<tr>						<td class="td_header_role_name">							<span class="td_label">								<xsl:text>Document maintained by</xsl:text>							</span>						</td>						<td class="td_header_role_value">							<xsl:choose>								<xsl:when test="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:name">									<xsl:call-template name="show-name">										<xsl:with-param name="name" select="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:name"/>									</xsl:call-template>								</xsl:when>								<xsl:otherwise>									<xsl:for-each select="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:id">										<xsl:call-template name="show-id"/>										<xsl:if test="position()!=last()">											<br/>										</xsl:if>									</xsl:for-each>								</xsl:otherwise>							</xsl:choose>						</td>					</tr>					<xsl:if test="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:addr | n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:telecom">						<tr>							<td class="td_header_role_name">								<span class="td_label">Contact info</span>							</td>							<td class="td_header_role_value">								<xsl:call-template name="show-contactInfo">									<xsl:with-param name="contact" select="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization"/>								</xsl:call-template>							</td>						</tr>					</xsl:if>				</tbody>			</table>		</xsl:if>	</xsl:template>	<!-- participant -->	<xsl:template name="participant">		<xsl:if test="n1:participant">			<table class="header_table">				<tbody>					<xsl:for-each select="n1:participant">						<tr>							<td class="td_header_role_name">								<xsl:variable name="participtRole">									<xsl:call-template name="translateRoleAssoCode">										<xsl:with-param name="classCode" select="n1:associatedEntity/@classCode"/>										<xsl:with-param name="code" select="n1:associatedEntity/n1:code"/>									</xsl:call-template>								</xsl:variable>								<xsl:choose>									<xsl:when test="$participtRole">										<span class="td_label">											<xsl:call-template name="firstCharCaseUp">												<xsl:with-param name="data" select="$participtRole"/>											</xsl:call-template>										</span>									</xsl:when>									<xsl:otherwise>										<span class="td_label">											<xsl:text>Participant</xsl:text>										</span>									</xsl:otherwise>								</xsl:choose>							</td>							<td class="td_header_role_value">								<xsl:if test="n1:functionCode">									<xsl:call-template name="show-code">										<xsl:with-param name="code" select="n1:functionCode"/>									</xsl:call-template>								</xsl:if>								<xsl:call-template name="show-associatedEntity">									<xsl:with-param name="assoEntity" select="n1:associatedEntity"/>								</xsl:call-template>								<xsl:if test="n1:time">									<xsl:if test="n1:time/n1:low">										<xsl:text> from </xsl:text>										<xsl:call-template name="show-time">											<xsl:with-param name="datetime" select="n1:time/n1:low"/>										</xsl:call-template>									</xsl:if>									<xsl:if test="n1:time/n1:high">										<xsl:text> to </xsl:text>										<xsl:call-template name="show-time">											<xsl:with-param name="datetime" select="n1:time/n1:high"/>										</xsl:call-template>									</xsl:if>								</xsl:if>								<xsl:if test="position() != last()">									<br/>								</xsl:if>							</td>						</tr>						<xsl:if test="n1:associatedEntity/n1:addr | n1:associatedEntity/n1:telecom">							<tr>								<td class="td_header_role_name">									<span class="td_label">										<xsl:text>Contact info</xsl:text>									</span>								</td>								<td class="td_header_role_value">									<xsl:call-template name="show-contactInfo">										<xsl:with-param name="contact" select="n1:associatedEntity"/>									</xsl:call-template>								</td>							</tr>						</xsl:if>					</xsl:for-each>				</tbody>			</table>		</xsl:if>	</xsl:template>	<!--Section Header-->	<xsl:template name="sendingSystemInfo">		<table class="subSect1" id="viewTopHeader">			<tbody>				<tr>					<td class="fieldName">Message Type</td>					<td>						<xsl:value-of select="n1:code/@displayName"/>					</td>					<td class="fieldName">Sending System ID</td>					<td>						<xsl:for-each select="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:id">							<xsl:call-template name="show-id"/>							<xsl:if test="position()!=last()">								<br/>							</xsl:if>						</xsl:for-each>					</td>				</tr>				<tr>					<td class="fieldName">Sending Facility</td>					<td>						<xsl:if test="n1:custodian">							<xsl:call-template name="show-name">								<xsl:with-param name="name" select="n1:custodian/n1:assignedCustodian/n1:representedCustodianOrganization/n1:name"/>							</xsl:call-template>						</xsl:if>					</td>					<td class="fieldName">Sending System</td>					<td>						<xsl:for-each select="n1:author/n1:assignedAuthor">							<xsl:value-of select="n1:assignedAuthoringDevice/n1:softwareName"/>						</xsl:for-each>					</td>				</tr>				<tr>					<td class="fieldName">Message Creation Date</td>					<td>						<xsl:call-template name="formatDateTime">							<xsl:with-param name="date">								<xsl:value-of select="n1:effectiveTime/@value"/>							</xsl:with-param>						</xsl:call-template>					</td>					<td class="fieldName">Message Status</td>					<td class="td_header_role_value">						<xsl:text>SetId: </xsl:text>						<xsl:call-template name="show-id">							<xsl:with-param name="id" select="n1:setId"/>						</xsl:call-template>						<br/>						<xsl:text>  Version: </xsl:text>						<xsl:value-of select="n1:versionNumber/@value"/>					</td>				</tr>			</tbody>		</table>	</xsl:template>	<xsl:template name="show-patient">		<xsl:param name="label"/>		<xsl:param name="value"/>		<xsl:for-each select="/n1:ClinicalDocument/n1:recordTarget/n1:patientRole">			<xsl:if test="not(n1:id/@nullFlavor)">				<table class="subSect1" id="viewPatient">					<tbody>						<tr>							<td class="fieldName">Patient Name</td>							<td>								<xsl:call-template name="show-name">									<xsl:with-param name="name" select="n1:patient/n1:name"/>								</xsl:call-template>							</td>							<td class="fieldName">Sending System Patient ID</td>							<td>								<xsl:for-each select="n1:id">									<xsl:call-template name="show-id"/>									<br/>								</xsl:for-each>							</td>						</tr>						<tr>							<td class="fieldName">Date of Birth</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:patient/n1:birthTime"/>								</xsl:call-template>							</td>							<td class="fieldName">Reported Age</td>							<td>								<xsl:value-of select="n1:ReportedAge/n1:Value1"/>								<xsl:value-of select="n1:ReportedAge/n1:Unit/n1:CodeDescTxt"/>							</td>						</tr>						<tr>							<td class="fieldName">Race</td>							<td>								<xsl:if test="n1:patient/sdtc:raceCode">									<xsl:choose>										<xsl:when test="n1:patient/sdtc:raceCode">											<xsl:for-each select="n1:patient/sdtc:raceCode">												<xsl:call-template name="show-race-ethnicity"/>												<xsl:if test="position() != last()">													<xsl:text> | </xsl:text>												</xsl:if>											</xsl:for-each>										</xsl:when>										<xsl:otherwise>											<xsl:text>Information not available</xsl:text>										</xsl:otherwise>									</xsl:choose>								</xsl:if>							</td>							<td class="fieldName">Ethnicity</td>							<td>								<xsl:if test="n1:patient/n1:ethnicGroupCode">									<xsl:choose>										<xsl:when test="n1:patient/n1:ethnicGroupCode">											<xsl:for-each select="n1:patient/n1:ethnicGroupCode">												<xsl:call-template name="show-race-ethnicity"/>											</xsl:for-each>										</xsl:when>										<xsl:otherwise>											<xsl:text>Information not available</xsl:text>										</xsl:otherwise>									</xsl:choose>								</xsl:if>							</td>						</tr>						<tr>							<td class="fieldName">Sex</td>							<td>								<xsl:for-each select="n1:patient/n1:administrativeGenderCode">									<xsl:call-template name="show-gender"/>								</xsl:for-each>							</td>							<td class="fieldName">Contact Info</td>							<td>								<xsl:call-template name="show-contactInfo">									<xsl:with-param name="contact" select="."/>								</xsl:call-template>							</td>						</tr>					</tbody>				</table>			</xsl:if>		</xsl:for-each>	</xsl:template>	<!-- relatedDocument -->	<xsl:template name="relatedDocument">		<xsl:if test="n1:relatedDocument">			<table class="header_table">				<tbody>					<xsl:for-each select="n1:relatedDocument">						<tr>							<td class="td_header_role_name">								<span class="td_label">									<xsl:text>Related document</xsl:text>								</span>							</td>							<td class="td_header_role_value">								<xsl:for-each select="n1:parentDocument">									<xsl:for-each select="n1:id">										<xsl:call-template name="show-id"/>										<br/>									</xsl:for-each>								</xsl:for-each>							</td>						</tr>					</xsl:for-each>				</tbody>			</table>		</xsl:if>	</xsl:template>	<!-- setAndVersion -->	<xsl:template name="setAndVersion">		<xsl:if test="n1:setId and n1:versionNumber">			<table class="header_table">				<tbody>					<tr>						<td class="td_header_role_name">							<xsl:text>SetId and Version</xsl:text>						</td>						<td class="td_header_role_value">							<xsl:text>SetId: </xsl:text>							<xsl:call-template name="show-id">								<xsl:with-param name="id" select="n1:setId"/>							</xsl:call-template>							<xsl:text>  Version: </xsl:text>							<xsl:value-of select="n1:versionNumber/@value"/>						</td>					</tr>				</tbody>			</table>		</xsl:if>	</xsl:template>	<!-- show StructuredBody  -->	<xsl:template match="n1:component/n1:structuredBody">		<xsl:for-each select="n1:component/n1:section">			<xsl:call-template name="section"/>		</xsl:for-each>	</xsl:template>	<!-- show nonXMLBody -->	<!-- top level component/section: display title and text,      and process any nested component/sections    -->	<xsl:template name="section">		<xsl:call-template name="section-title">			<xsl:with-param name="title" select="n1:title"/>		</xsl:call-template>		<xsl:call-template name="define-section"/>		<xsl:for-each select="n1:component/n1:section">			<xsl:call-template name="nestedSection">				<xsl:with-param name="margin" select="2"/>			</xsl:call-template>		</xsl:for-each>	</xsl:template>	<!-- top level section title -->	<xsl:template name="section-title">		<xsl:param name="title"/>		<xsl:if test="n1:code/@code!='123-4567'">			<xsl:choose>				<xsl:when test="count(/n1:ClinicalDocument/n1:component/n1:structuredBody/n1:component[n1:section]) &gt; 0">					<div class="sect">						<table class="sectHeader">							<tr>								<td class="sectName" id="{generate-id($title)}">									<xsl:value-of select="$title"/>								</td>								<td style="text-align:right;">									<a href="#pageTop" class="backToTopLink">Back to top </a>								</td>							</tr>						</table>					</div>				</xsl:when>				<xsl:otherwise>					<h3>						<xsl:value-of select="$title"/>					</h3>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!-- top-level section Text   -->	<xsl:template name="section-text">		<div>			<xsl:apply-templates select="n1:text"/>		</div>	</xsl:template>	<xsl:template name="define-section">		<xsl:apply-templates select="n1:text"/>		<!-- Encounter Information-->		<xsl:if test="n1:code/@code='46240-8'">			<table class="privateDtTable">				<thead>					<tr>						<th width="25%">Encounter</th>						<th width="25%">Date(s)</th>						<th width="25%">Discharge Disposition</th>						<th width="25%">Location</th>					</tr>				</thead>				<tbody>					<xsl:for-each select="n1:entry/n1:encounter">						<tr>							<td>								<xsl:value-of select="n1:code/@displayName"/>								<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>							</td>							<td>								<xsl:call-template name="formatDateTime">									<xsl:with-param name="date">										<xsl:value-of select="n1:effectiveTime/@value"/>									</xsl:with-param>								</xsl:call-template>							</td>							<td>								<xsl:value-of select="sdtc:dischargeDispositionCode/@displayName"/>								<xsl:if test="sdtc:dischargeDispositionCode/@code"> (<xsl:value-of select="sdtc:dischargeDispositionCode/@code"/>)</xsl:if>							</td>							<td>								<xsl:for-each select="n1:participant/n1:participantRole">									<li>										<xsl:value-of select="n1:code/@displayName"/>										<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>									</li>								</xsl:for-each>							</td>						</tr>						<xsl:if test="n1:entryRelationship">							<xsl:for-each select="n1:entryRelationship/n1:act">								<tr>									<td colspan="4">										<b>											<xsl:value-of select="n1:code/@displayName"/>											<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>										</b>									</td>								</tr>								<xsl:choose>									<xsl:when test="n1:entryRelationship/n1:observation/n1:templateId/@root='2.16.840.1.113883.10.20.15.2.3.3'">										<tr>											<td colspan="4">												<table class="privateDtTable">													<thead>														<tr>															<th width="30%">Initial Case Report Trigger Code Problem Observation</th>															<th width="17%">Problem</th>															<th width="17%">Trigger Code (CodeSystem)</th>															<th width="18%">RCTC OID (Version)</th>															<th width="18%">Date(s)</th>														</tr>													</thead>													<tbody>														<xsl:for-each select="./n1:entryRelationship/n1:observation">															<tr>																<td>																	<xsl:value-of select="n1:code/@displayName"/>																	<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>																</td>																<td>																	<xsl:value-of select="n1:value/@displayName"/>																</td>																<td>																	<xsl:value-of select="n1:value/@code"/>																	<xsl:if test="n1:value/@codeSystemName"> (<xsl:value-of select="n1:value/@codeSystemName"/>)</xsl:if>																</td>																<td>																	<xsl:value-of select="n1:value/@sdtc:valueSet"/>																	<xsl:if test="n1:value/@sdtc:valueSetVersion"> (<xsl:value-of select="n1:value/@sdtc:valueSetVersion"/>)</xsl:if>																</td>																<td>																	<xsl:call-template name="formatDateTime">																		<xsl:with-param name="date">																			<xsl:value-of select="n1:effectiveTime/n1:low/@value"/>																		</xsl:with-param>																	</xsl:call-template>																</td>															</tr>														</xsl:for-each>													</tbody>												</table>											</td>										</tr>									</xsl:when>									<xsl:otherwise>										<tr>											<td colspan="4">												<table class="privateDtTable">													<thead>														<tr>															<th width="33%">Problem Type</th>															<th width="33%">Problem</th>															<th width="34%">Date(s)</th>														</tr>													</thead>													<tbody>														<xsl:for-each select="./n1:entryRelationship/n1:observation">															<tr>																<td>																	<xsl:value-of select="n1:code/@displayName"/>																	<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>																</td>																<td>																	<xsl:value-of select="n1:value/@displayName"/>																</td>																<td>																	<xsl:call-template name="formatDateTime">																		<xsl:with-param name="date">																			<xsl:value-of select="n1:effectiveTime/n1:low/@value"/>																		</xsl:with-param>																	</xsl:call-template>																</td>															</tr>														</xsl:for-each>													</tbody>												</table>											</td>										</tr>									</xsl:otherwise>								</xsl:choose>							</xsl:for-each>						</xsl:if>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<!-- End Encounter Information-->		<xsl:if test="n1:code/@code='11502-2'">			<table class="subSect1" id="viewLabReport">				<tbody>					<tr>						<td class="fieldName">Order</td>						<td colspan="3">							<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:code/@displayName"/>						</td>					</tr>					<tr>						<td class="fieldName">Filler Order Number</td>						<td>							<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:procedure/n1:entryRelationship/n1:observation/n1:code[@code='LAB125']/../n1:value"/>						</td>						<td class="fieldName">Laboratory Report Date</td>						<td>							<xsl:call-template name="dateFormatter">								<xsl:with-param name="date">									<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:effectiveTime/@value"/>								</xsl:with-param>							</xsl:call-template>						</td>					</tr>					<tr>						<td class="fieldName">Specimen Collection Date Time</td>						<td>							<xsl:call-template name="dateFormatter">								<xsl:with-param name="date">									<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:procedure/n1:effectiveTime/@value"/>								</xsl:with-param>							</xsl:call-template>						</td>						<td class="fieldName">Specimen</td>						<td>							<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:procedure/n1:specimen/n1:specimenRole/n1:specimenPlayingEntity/n1:code/@displayName"/>						</td>					</tr>					<tr>						<td class="fieldName">Reporting Facility</td>						<td>							<xsl:for-each select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/..">								<xsl:call-template name="author"/>							</xsl:for-each>						</td>						<td class="fieldName">Ordering Facility</td>						<td>							<xsl:for-each select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:performer">								<xsl:if test="n1:assignedEntity/n1:representedOrganization">									<xsl:call-template name="show-name">										<xsl:with-param name="name" select="n1:assignedEntity/n1:representedOrganization/n1:name"/>									</xsl:call-template>									<br/>									<xsl:call-template name="show-contactInfo">										<xsl:with-param name="contact" select="n1:assignedEntity"/>									</xsl:call-template>								</xsl:if>							</xsl:for-each>						</td>					</tr>					<tr>						<td class="fieldName">Ordering Physician</td>						<td>							<xsl:for-each select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:performer">								<xsl:if test="n1:assignedEntity/n1:assignedPerson">									<xsl:call-template name="show-name">										<xsl:with-param name="name" select="n1:assignedEntity/n1:assignedPerson/n1:name"/>									</xsl:call-template>									<br/>									<xsl:call-template name="show-contactInfo">										<xsl:with-param name="contact" select="n1:assignedEntity"/>									</xsl:call-template>								</xsl:if>							</xsl:for-each>						</td>						<td class="fieldName">Status</td>						<td>							<xsl:value-of select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:statusCode/@code"/>						</td>					</tr>				</tbody>			</table>			<xsl:if test="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:observation">				<table class="subSect1" id="LabNameValue">					<tbody>						<xsl:for-each select="n1:entry/n1:organizer/n1:id[@root='order-identifier-1']/../n1:component">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:for-each>						<xsl:for-each select="n1:entry/n1:observation/n1:entryRelationship">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:for-each>					</tbody>				</table>			</xsl:if>			<table class="subSect" id="viewCase">				<tbody>					<tr style="background:#FFF;">						<td colspan="2">							<table id="invHistoryTable" class="dtTable">								<thead>									<tr>										<th width="40%">Procedure</th>										<th>Result</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:entry">										<tr class="odd">											<td width="25%">												<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:code/@displayName"/>												<xsl:if test="n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:procedure/n1:effectiveTime">													<br/>													<br/>													<b>Observation Date/Time:</b>													<xsl:call-template name="dateFormatter">														<xsl:with-param name="date">															<xsl:value-of select="n1:organizer/n1:id[@root='order-identifier-1']/../n1:component/n1:procedure/n1:effectiveTime/@value"/>														</xsl:with-param>													</xsl:call-template>												</xsl:if>												<xsl:if test="n1:organizer/n1:id[@root='result-identifier-1']/../n1:performer/n1:assignedEntity/n1:representedOrganization">													<br/>													<br/>													<b>Performing Facility:</b>													<xsl:call-template name="show-name">														<xsl:with-param name="name" select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:performer/n1:assignedEntity/n1:representedOrganization/n1:name"/>													</xsl:call-template>													<br/>													<xsl:call-template name="show-contactInfo">														<xsl:with-param name="contact" select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:performer/n1:assignedEntity/n1:representedOrganization"/>													</xsl:call-template>												</xsl:if>											</td>											<td width="70%">												<xsl:if test="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value/@code">													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value/@displayName"/>													<br/>												</xsl:if>												<xsl:if test="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value!=''">													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value"/>													<br/>												</xsl:if>												<xsl:if test="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value/@value">													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value/@value"/>													<xsl:text> </xsl:text>													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:value/@unit"/>													<br/>												</xsl:if>												<xsl:if test="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:referenceRange">													<br/>													<b>Refrence Range:<xsl:text> </xsl:text>													</b>Low:<xsl:text> </xsl:text>													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:referenceRange/n1:observationRange/n1:value/n1:low/@value"/>													<xsl:text> </xsl:text>High:<xsl:text> </xsl:text>													<xsl:value-of select="n1:organizer/n1:id[@root='result-identifier-1']/../n1:component/n1:observation/n1:id[@root='result-test-identifier-1']/../n1:referenceRange/n1:observationRange/n1:value/n1:high/@value"/>													<br/>												</xsl:if>											</td>										</tr>									</xsl:for-each>								</tbody>							</table>						</td>					</tr>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='55752-0'">			<table class="subSect1" id="clinicalInfo">				<tbody>					<xsl:for-each select="n1:entry">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>					<xsl:for-each select="n1:entry/n1:observation/n1:entryRelationship">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='29762-2'">			<table class="subSect1" id="socialHistory">				<tbody>					<xsl:for-each select="n1:entry">						<xsl:if test="n1:observation">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>										<xsl:choose>											<xsl:when test="n1:observation/n1:effectiveTime/n1:low"> 										( Effective - <xsl:call-template name="formatDateTime">													<xsl:with-param name="date">														<xsl:value-of select="n1:observation/n1:effectiveTime/n1:low/@value"/>													</xsl:with-param>												</xsl:call-template>)										</xsl:when>											<xsl:when test="n1:observation/n1:effectiveTime/@value">										 ( Effective - <xsl:call-template name="formatDateTime">													<xsl:with-param name="date">														<xsl:value-of select="n1:observation/n1:effectiveTime/@value"/>													</xsl:with-param>												</xsl:call-template>)										</xsl:when>										</xsl:choose>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>										<xsl:choose>											<xsl:when test="n1:observation/n1:effectiveTime/n1:low"> 										( Effective - <xsl:call-template name="formatDateTime">													<xsl:with-param name="date">														<xsl:value-of select="n1:observation/n1:effectiveTime/n1:low/@value"/>													</xsl:with-param>												</xsl:call-template>)										</xsl:when>											<xsl:when test="n1:observation/n1:effectiveTime/@value">										 ( Effective - <xsl:call-template name="formatDateTime">													<xsl:with-param name="date">														<xsl:value-of select="n1:observation/n1:effectiveTime/@value"/>													</xsl:with-param>												</xsl:call-template>)										</xsl:when>										</xsl:choose>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:if>					</xsl:for-each>					<xsl:if test="n1:entry/n1:act/n1:templateId/@root='2.16.840.1.113883.10.20.15.2.3.1'">						<table class="privateDtTable">							<xsl:for-each select="n1:entry/n1:act">								<xsl:if test="position() = 1">									<thead>										<tr>											<th width="33%">Travel History: Date(s)</th>											<th width="33%">Notes</th>											<th width="34%">Location</th>										</tr>									</thead>								</xsl:if>								<tbody>									<tr>										<td>											<xsl:call-template name="effectiveTime"/>										</td>										<td>											<xsl:value-of select="n1:text"/>										</td>										<td>											<xsl:if test="n1:participant/n1:participantRole/n1:code">												<xsl:value-of select="n1:participant/n1:participantRole/n1:code/@displayName"/> (<xsl:value-of select="n1:participant/n1:participantRole/n1:code/@code"/>) </xsl:if>											<xsl:if test="n1:participant/n1:participantRole/n1:addr">												<xsl:call-template name="show-address">													<xsl:with-param name="address" select="n1:participant/n1:participantRole/n1:addr"/>												</xsl:call-template>											</xsl:if>										</td>									</tr>								</tbody>							</xsl:for-each>						</table>					</xsl:if>					<xsl:for-each select="n1:entry/n1:observation/n1:entryRelationship">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<!-- Immunization Section -->		<xsl:if test="n1:code/@code='11369-6'">			<table class="privateDtTable">				<thead>					<tr>						<th width="15%">Vaccine</th>						<th width="10%">Date</th>						<th width="10%">Status</th>						<th width="10%">Route</th>						<th width="10%">Dose</th>						<th width="10%">Lot No.</th>						<th width="10%">Manufacturer Orgnization</th>						<th width="13%">Performer Orgnization</th>						<th width="13%">Performer Person</th>					</tr>				</thead>				<tbody>					<xsl:for-each select="n1:entry/n1:substanceAdministration">						<tr>							<td>								<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:code/@displayName"/>								<xsl:if test="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:code/@code"> (<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:code/@code"/>)</xsl:if>							</td>							<td>								<xsl:call-template name="formatDateTime">									<xsl:with-param name="date">										<xsl:value-of select="n1:effectiveTime/@value"/>									</xsl:with-param>								</xsl:call-template>							</td>							<td>								<xsl:value-of select="n1:statusCode/@code"/>							</td>							<td>								<xsl:value-of select="n1:routeCode/@displayName"/>								<xsl:if test="n1:routeCode/@code"> (<xsl:value-of select="n1:routeCode/@code"/>)</xsl:if>							</td>							<td>								<xsl:value-of select="n1:doseQuantity/@value"/><![CDATA[ ]]><xsl:value-of select="n1:doseQuantity/@unit"/>							</td>							<td>								<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:lotNumberText"/>							</td>							<td>								<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturerOrganization/n1:name"/>							</td>							<td>								<xsl:value-of select="n1:performer/n1:assignedEntity/n1:representedOrganization/n1:name"/>								<br/>								<xsl:call-template name="show-contactInfo">									<xsl:with-param name="contact" select="n1:performer/n1:assignedEntity/n1:representedOrganization"/>								</xsl:call-template>							</td>							<td>								<xsl:call-template name="show-name">									<xsl:with-param name="name" select="n1:performer/n1:assignedEntity/n1:assignedPerson/n1:name"/>								</xsl:call-template>								<br/>								<xsl:call-template name="show-contactInfo">									<xsl:with-param name="contact" select="n1:performer/n1:assignedEntity"/>								</xsl:call-template>							</td>						</tr>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<!-- End Immunization Section -->		<!--Plan of Treatment-->		<xsl:if test="n1:code/@code='18776-5'">			<table class="privateDtTable">				<thead>					<tr>						<th width="40%">Initial Case Report Trigger Code Lab Test Order</th>						<th width="20%">Trigger Code (CodeSystem)</th>						<th width="20%">RCTC OID (Version)</th>						<th width="20%">Ordered Date</th>					</tr>				</thead>				<tbody>					<xsl:for-each select="n1:entry">						<tr>							<td>								<xsl:value-of select="n1:observation/n1:code/@displayName"/>							</td>							<td>								<xsl:value-of select="n1:observation/n1:code/@code"/>								<xsl:if test="n1:observation/n1:code/@codeSystemName"> (<xsl:value-of select="n1:observation/n1:code/@codeSystemName"/>)</xsl:if>							</td>							<td>								<xsl:value-of select="n1:observation/n1:code/@sdtc:valueSet"/>								<xsl:if test="n1:observation/n1:code/@sdtc:valueSetVersion"> (<xsl:value-of select="n1:observation/n1:code/@sdtc:valueSetVersion"/>)</xsl:if>							</td>							<td>								<xsl:call-template name="formatDateTime">									<xsl:with-param name="date">										<xsl:value-of select="n1:observation/n1:effectiveTime/@value"/>									</xsl:with-param>								</xsl:call-template>							</td>						</tr>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<!--End Plan of Treatment-->		<!-- Results-->		<xsl:if test="n1:code/@code='30954-2'">			<xsl:for-each select="n1:entry">				<table class="privateDtTable">					<thead>						<tr>							<th width="50%">Results Panel</th>							<th width="50%">Date(s)</th>						</tr>					</thead>					<tbody>						<tr>							<td>								<xsl:value-of select="n1:organizer/n1:code/@displayName"/>								<xsl:if test="n1:organizer/n1:code/@code"> (<xsl:value-of select="n1:organizer/n1:code/@code"/>)</xsl:if>							</td>							<td>								<xsl:for-each select="n1:organizer">									<xsl:call-template name="effectiveTime"/>								</xsl:for-each>							</td>						</tr>						<tr>							<td colspan="2">								<xsl:choose>									<xsl:when test="n1:organizer/n1:component/n1:observation/n1:code/@sdtc:valueSet">										<table class="privateDtTable">											<thead>												<tr>													<th width="15%">Initial Case Report Trigger Code Result Observation </th>													<th width="10%">Trigger Code (CodeSystem)</th>													<th width="10%">RCTC OID (Version)</th>													<th width="10%">Outcome</th>													<th width="10%">Outcome Trigger Code (codeSystem)</th>													<th width="10%">Outcome RCTC OID (Version)</th>													<th width="9%">Interpretation</th>													<th width="8%">Date(s)</th>													<th width="9%">Reference Range</th>													<th width="9%">Reference Range Interpretation</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:organizer/n1:component">													<tr>														<td>															<xsl:value-of select="n1:observation/n1:code/@displayName"/>														</td>														<td>															<xsl:value-of select="n1:observation/n1:code/@code"/>															<xsl:if test="n1:observation/n1:code/@codeSystemName"> (<xsl:value-of select="n1:observation/n1:code/@codeSystemName"/>)</xsl:if>														</td>														<td>															<xsl:if test="n1:observation/n1:code/@sdtc:valueSet"> (<xsl:value-of select="n1:observation/n1:code/@sdtc:valueSet"/>)</xsl:if>															<xsl:if test="n1:observation/n1:code/@sdtc:valueSetVersion"> (<xsl:value-of select="n1:observation/n1:code/@sdtc:valueSetVersion"/>)</xsl:if>														</td>														<td>															<xsl:if test="n1:observation/n1:value/@value">																<xsl:value-of select="n1:observation/n1:value/@value"/>																<xsl:text> </xsl:text>																<xsl:value-of select="n1:observation/n1:value/@unit"/>															</xsl:if>															<xsl:if test="n1:observation/n1:value/@code">																<xsl:value-of select="n1:observation/n1:value/@displayName"/>															</xsl:if>														</td>														<td>															<xsl:value-of select="n1:observation/n1:value/@code"/>															<xsl:if test="n1:observation/n1:value/@codeSystemName"> (<xsl:value-of select="n1:observation/n1:value/@codeSystemName"/>)</xsl:if>														</td>														<td>															<xsl:value-of select="n1:observation/n1:value/@sdtc:valueSet"/>															<xsl:if test="n1:observation/n1:value/@sdtc:valueSetVersion"> (<xsl:value-of select="n1:observation/n1:value/@sdtc:valueSetVersion"/>)</xsl:if>														</td>														<td>															<xsl:value-of select="n1:observation/n1:interpretationCode/@displayName"/>															<xsl:if test="n1:observation/n1:interpretationCode/@code"> (<xsl:value-of select="n1:observation/n1:interpretationCode/@code"/>)</xsl:if>														</td>														<td>															<xsl:for-each select="n1:observation">																<xsl:call-template name="effectiveTime"/>															</xsl:for-each>														</td>														<td>															<xsl:for-each select="n1:observation/n1:referenceRange/n1:observationRange">																<xsl:call-template name="display-referenceRange"/>															</xsl:for-each>														</td>														<td>															<xsl:value-of select="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@displayName"/>															<xsl:if test="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@code"> (<xsl:value-of select="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@code"/>)</xsl:if>														</td>													</tr>												</xsl:for-each>											</tbody>										</table>									</xsl:when>									<xsl:otherwise>										<table class="privateDtTable">											<thead>												<tr>													<th width="25%">Test</th>													<th width="10%">Outcome</th>													<th width="10%">Interpretation</th>													<th width="10%">Date(s)</th>													<th width="10%">Reference Range</th>													<th width="15%">Reference Range Interpretation</th>													<th width="20%">Reference Range Description</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:organizer/n1:component">													<tr>														<td>															<xsl:value-of select="n1:observation/n1:code/@displayName"/>														</td>														<td>															<xsl:if test="n1:observation/n1:value/@value">																<xsl:value-of select="n1:observation/n1:value/@value"/>																<xsl:text> </xsl:text>																<xsl:value-of select="n1:observation/n1:value/@unit"/>															</xsl:if>															<xsl:if test="n1:observation/n1:value/@code">																<xsl:value-of select="n1:observation/n1:value/@displayName"/>															</xsl:if>														</td>														<td>															<xsl:value-of select="n1:observation/n1:interpretationCode/@displayName"/>															<xsl:if test="n1:observation/n1:interpretationCode/@code"> (<xsl:value-of select="n1:observation/n1:interpretationCode/@code"/>)</xsl:if>														</td>														<td>															<xsl:for-each select="n1:observation">																<xsl:call-template name="effectiveTime"/>															</xsl:for-each>														</td>														<td>															<xsl:for-each select="n1:observation/n1:referenceRange/n1:observationRange">																<xsl:call-template name="display-referenceRange"/>															</xsl:for-each>														</td>														<td>															<xsl:value-of select="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@displayName"/>															<xsl:if test="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@code"> (<xsl:value-of select="n1:observation/n1:referenceRange/n1:observationRange/n1:interpretationCode/@code"/>)</xsl:if>														</td>														<td>															<xsl:value-of select="n1:observation/n1:referenceRange/n1:observationRange/n1:text"/>														</td>													</tr>												</xsl:for-each>											</tbody>										</table>									</xsl:otherwise>								</xsl:choose>							</td>						</tr>					</tbody>				</table>			</xsl:for-each>		</xsl:if>		<!-- End Results-->		<!-- Problem Information-->		<xsl:if test="n1:code/@code='11450-4'">			<table class="privateDtTable">				<thead>					<tr>						<th width="33%">Concern</th>						<th width="33%">Concern Status</th>						<th width="33%">Date(s)</th>					</tr>				</thead>				<tbody>					<xsl:for-each select="n1:entry/n1:act">						<tr>							<td>								<xsl:value-of select="n1:code/@displayName"/>								<xsl:if test="n1:code/@code"> (<xsl:value-of select="n1:code/@code"/>)</xsl:if>							</td>							<td>								<xsl:value-of select="n1:statusCode/@code"/>							</td>							<td>								<xsl:call-template name="effectiveTime"/>							</td>						</tr>						<xsl:if test="n1:entryRelationship">							<tr>								<td colspan="3">									<table class="privateDtTable">										<thead>											<tr>												<th width="33%">Problem Type</th>												<th width="33%">Problem</th>												<th width="33%">Date(s)</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:entryRelationship">												<tr>													<td>														<xsl:value-of select="n1:observation/n1:code/@displayName"/>														<xsl:if test="n1:observation/n1:code/@code"> (<xsl:value-of select="n1:observation/n1:code/@code"/>)</xsl:if>													</td>													<td>														<xsl:value-of select="n1:observation/n1:value/@displayName"/>														<xsl:if test="n1:observation/n1:value/@code"> (<xsl:value-of select="n1:observation/n1:value/@code"/>)</xsl:if>													</td>													<td>														<xsl:for-each select="n1:observation">															<xsl:call-template name="effectiveTime"/>														</xsl:for-each>													</td>												</tr>											</xsl:for-each>										</tbody>									</table>								</td>							</tr>						</xsl:if>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='CMR'">			<table class="subSect1" id="MorbidityInfo">				<tbody>					<xsl:for-each select="n1:entry">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>					<xsl:for-each select="n1:entry/n1:observation/n1:entryRelationship">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='1234567-RPT'">			<xsl:for-each select="n1:entry">				<table class="subSect1">					<tbody>						<xsl:for-each select="n1:organizer/n1:component">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:for-each>					</tbody>				</table>			</xsl:for-each>		</xsl:if>		<xsl:if test="n1:code/@code='123-5877'">			<xsl:for-each select="n1:entry">				<table class="subSect1">					<tbody>						<tr>							<td class="fieldName">								<xsl:text>Previous Condition</xsl:text>							</td>							<td>								<xsl:call-template name="display-value"/>							</td>							<td class="fieldName">								<xsl:text>Diagnosis Date</xsl:text>							</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:observation/n1:effectiveTime"/>								</xsl:call-template>							</td>						</tr>						<tr>							<td class="fieldName">								<xsl:text>Treatment Date</xsl:text>							</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:observation/n1:entryRelationship/n1:observation[n1:code/@code='NBS252']/n1:value"/>								</xsl:call-template>							</td>							<td class="fieldName">								<xsl:text>Confirmed</xsl:text>							</td>							<td>								<xsl:value-of select="n1:observation/n1:entryRelationship/n1:observation[n1:code/@code='NBS253']/n1:value/@displayName"/>							</td>						</tr>					</tbody>				</table>			</xsl:for-each>		</xsl:if>		<xsl:if test="n1:code/@code='123-5897'">			<xsl:for-each select="n1:entry">				<table class="subSect1">					<tbody>						<tr>							<td class="fieldName">								<xsl:text>Source</xsl:text>							</td>							<td>								<xsl:value-of select="n1:observation/n1:informant/n1:assignedEntity/n1:code/@displayName"/>							</td>							<td class="fieldName">								<xsl:text>Sign/Symptom</xsl:text>							</td>							<td>								<xsl:value-of select="n1:observation/n1:code/@displayName"/>							</td>						</tr>						<tr>							<td class="fieldName">								<xsl:text>Anatomic Site</xsl:text>							</td>							<td>								<xsl:value-of select="n1:observation/n1:value/@displayName"/>							</td>							<td class="fieldName">								<xsl:text>Other Anatomic Site, Specify</xsl:text>							</td>							<td>								<xsl:value-of select="n1:observation/n1:entryRelationship/n1:observation/n1:code/@displayName"/>							</td>						</tr>						<tr>							<td class="fieldName">								<xsl:text>Observation/Onset Date</xsl:text>							</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:observation/n1:effectiveTime"/>								</xsl:call-template>							</td>							<td class="fieldName">								<xsl:text>Duration (Days)</xsl:text>							</td>							<td>							</td>						</tr>					</tbody>				</table>			</xsl:for-each>		</xsl:if>		<xsl:if test="n1:code/@code='123-EXPOSURE' or n1:code/@code='12345-PatientInfo'">			<table class="subSect1" id="exposureInfo">				<tbody>					<xsl:for-each select="n1:entry">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>					<xsl:for-each select="n1:entry/n1:observation/n1:entryRelationship">						<xsl:choose>							<xsl:when test="position()mod 2">								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<xsl:if test="position() = last()">									<td class="fieldName"/>									<td/>								</xsl:if>							</xsl:when>							<xsl:otherwise>								<td class="fieldName">									<xsl:value-of select="n1:observation/n1:code/@displayName"/>								</td>								<td>									<xsl:call-template name="display-value"/>								</td>								<tr/>							</xsl:otherwise>						</xsl:choose>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='29549-3'">			<table class="privateDtTable">				<thead>					<tr>						<th width="20%">Medication</th>						<th width="16%">Dose</th>						<th width="16%">Duration</th>						<th width="16%">Route</th>						<th width="16%">Source</th>						<th width="16%">Indicator</th>					</tr>				</thead>				<tbody>					<xsl:for-each select="n1:entry/n1:substanceAdministration">						<tr>							<td>								<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:code/@displayName"/> (<xsl:value-of select="n1:consumable/n1:manufacturedProduct/n1:manufacturedMaterial/n1:code/@code"/>)							</td>							<td>								<xsl:value-of select="n1:doseQuantity/@value"/>								<xsl:text> </xsl:text>								<xsl:value-of select="n1:doseQuantity/@unit"/>							</td>							<td>								<xsl:for-each select="n1:effectiveTime">									<xsl:if test="n1:period">										<xsl:call-template name="show-period"/>									</xsl:if>								</xsl:for-each>								<xsl:for-each select="n1:effectiveTime">									<xsl:choose>										<xsl:when test="n1:width">											<xsl:call-template name="show-width"/>										</xsl:when>										<xsl:when test="n1:high">											<xsl:call-template name="dateFormatter">												<xsl:with-param name="date" select="n1:low/@value"/>											</xsl:call-template> - <xsl:call-template name="dateFormatter">												<xsl:with-param name="date" select="n1:high/@value"/>											</xsl:call-template>										</xsl:when>									</xsl:choose>								</xsl:for-each>							</td>							<td>								<xsl:value-of select="n1:routeCode/@displayName"/> (<xsl:value-of select="n1:routeCode/@code"/>)</td>							<td>								<xsl:value-of select="n1:entryRelationship/n1:observation/n1:code/@displayName"/>								<xsl:if test="n1:entryRelationship/n1:observation/n1:code/@code"> (<xsl:value-of select="n1:entryRelationship/n1:observation/n1:code/@code"/>)</xsl:if>							</td>							<td>								<xsl:value-of select="n1:entryRelationship/n1:observation/n1:value/@displayName"/>								<xsl:if test="n1:entryRelationship/n1:observation/n1:value/@code"> (<xsl:value-of select="n1:entryRelationship/n1:observation/n1:value/@code"/>)</xsl:if>							</td>						</tr>					</xsl:for-each>				</tbody>			</table>		</xsl:if>		<xsl:if test="n1:code/@code='IXS'">			<xsl:for-each select="n1:entry">				<table class="subSect1" id="$tableId">					<tbody>						<tr>							<td class="fieldName">Interview Status</td>							<td>								<xsl:value-of select="n1:encounter/n1:statusCode/@code"/>							</td>							<td class="fieldName">Interview Date</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:encounter/n1:effectiveTime"/>								</xsl:call-template>							</td>						</tr>						<tr>							<td class="fieldName">Interviewer</td>							<td>								<xsl:for-each select="n1:encounter/n1:participant/n1:participantRole">									<xsl:if test="n1:playingEntity/n1:name">										<xsl:call-template name="show-name">											<xsl:with-param name="name" select="n1:playingEntity/n1:name"/>										</xsl:call-template>									</xsl:if>									<br/>									<xsl:if test="n1:addr | n1:telecom">										<xsl:call-template name="show-contactInfo">											<xsl:with-param name="contact" select="."/>										</xsl:call-template>									</xsl:if>								</xsl:for-each>							</td>							<td class="fieldName"/>							<td>								</td>						</tr>						<xsl:for-each select="n1:encounter/n1:entryRelationship">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:for-each>					</tbody>				</table>			</xsl:for-each>		</xsl:if>		<xsl:if test="n1:code/@code='55753-8'">			<xsl:for-each select="n1:entry">				<xsl:if test="n1:substanceAdministration">					<xsl:variable name="tableId">						<xsl:text>treatment</xsl:text>						<xsl:value-of select="n1:substanceAdministration/n1:id/@extension"/>					</xsl:variable>					<table class="subSect1" id="$tableId">						<tbody>							<tr>								<td class="fieldName">Provider</td>								<td>									<xsl:for-each select="n1:substanceAdministration/n1:participant/n1:participantRole">										<xsl:if test="n1:playingEntity/n1:name and n1:id/@assigningAuthorityName='LR_PSN'">											<xsl:call-template name="show-name">												<xsl:with-param name="name" select="n1:playingEntity/n1:name"/>											</xsl:call-template>										</xsl:if>										<br/>										<xsl:if test="(n1:addr | n1:telecom) and n1:id/@assigningAuthorityName='LR_PSN'">											<xsl:call-template name="show-contactInfo">												<xsl:with-param name="contact" select="."/>											</xsl:call-template>										</xsl:if>									</xsl:for-each>								</td>								<td class="fieldName">Reporting Facility</td>								<td>									<xsl:for-each select="n1:substanceAdministration/n1:participant/n1:participantRole">										<xsl:if test="n1:playingEntity/n1:name and n1:id/@assigningAuthorityName='LR_ORG'">											<xsl:call-template name="show-name">												<xsl:with-param name="name" select="n1:playingEntity/n1:name"/>											</xsl:call-template>											<br/>											<xsl:choose>												<xsl:when test="n1:addr | n1:telecom">													<xsl:call-template name="show-contactInfo">														<xsl:with-param name="contact" select="."/>													</xsl:call-template>												</xsl:when>												<xsl:otherwise>													<xsl:if test="n1:addr | n1:telecom">														<xsl:call-template name="show-contactInfo">															<xsl:with-param name="contact" select="."/>														</xsl:call-template>													</xsl:if>												</xsl:otherwise>											</xsl:choose>										</xsl:if>									</xsl:for-each>								</td>							</tr>							<tr>								<td class="fieldName">Treatment Date</td>								<td>									<xsl:for-each select="n1:substanceAdministration/n1:effectiveTime">										<xsl:if test="n1:low">											<xsl:call-template name="show-time">												<xsl:with-param name="datetime" select="n1:low"/>											</xsl:call-template>										</xsl:if>									</xsl:for-each>								</td>								<xsl:choose>									<xsl:when test="n1:substanceAdministration/n1:consumable/n1:manufacturedProduct/n1:manufacturedLabeledDrug/n1:code[@code!='OTH'] or n1:substanceAdministration/n1:consumable/n1:manufacturedProduct/n1:manufacturedLabeledDrug/n1:code/@nullFlavor=''">										<td class="fieldName">Treatment Drug</td>										<td>											<xsl:value-of select="n1:substanceAdministration/n1:consumable/n1:manufacturedProduct/n1:manufacturedLabeledDrug/n1:code/@displayName"/>										</td>									</xsl:when>									<xsl:otherwise>										<td class="fieldName">Custom Treatment</td>										<td>											<xsl:value-of select="n1:substanceAdministration/n1:consumable/n1:manufacturedProduct/n1:manufacturedLabeledDrug/n1:name"/>										</td>									</xsl:otherwise>								</xsl:choose>							</tr>							<tr>								<td class="fieldName">Treatment Dosage/Strength</td>								<td>									<xsl:value-of select="n1:substanceAdministration/n1:doseQuantity/@value"/>									<xsl:text> </xsl:text>									<xsl:value-of select="n1:substanceAdministration/n1:doseQuantity/@unit"/>								</td>								<td class="fieldName">Treatment Frequency</td>								<td>									<xsl:for-each select="n1:substanceAdministration/n1:effectiveTime">										<xsl:if test="n1:period">											<xsl:call-template name="show-period"/>										</xsl:if>									</xsl:for-each>								</td>							</tr>							<tr>								<td class="fieldName">Treatment Duration</td>								<td>									<xsl:for-each select="n1:substanceAdministration/n1:effectiveTime">										<xsl:choose>											<xsl:when test="n1:width">												<xsl:call-template name="show-width"/>											</xsl:when>											<xsl:when test="n1:high">												<xsl:call-template name="dateFormatter">													<xsl:with-param name="date" select="n1:low/@value"/>												</xsl:call-template> - <xsl:call-template name="dateFormatter">													<xsl:with-param name="date" select="n1:high/@value"/>												</xsl:call-template>											</xsl:when>										</xsl:choose>									</xsl:for-each>								</td>								<td class="fieldName">Treatment Route</td>								<td>									<xsl:value-of select="n1:substanceAdministration/n1:routeCode/@displayName"/> (<xsl:value-of select="n1:substanceAdministration/n1:routeCode/@code"/>)								</td>							</tr>						</tbody>					</table>				</xsl:if>			</xsl:for-each>		</xsl:if>		<xsl:if test="n1:code/@code='IXS'">			<xsl:for-each select="n1:entry">				<table class="subSect1" id="$tableId">					<tbody>						<tr>							<td class="fieldName">Interview Status</td>							<td>								<xsl:value-of select="n1:encounter/n1:statusCode/@code"/>							</td>							<td class="fieldName">Interview Date</td>							<td>								<xsl:call-template name="show-time">									<xsl:with-param name="datetime" select="n1:encounter/n1:effectiveTime"/>								</xsl:call-template>							</td>						</tr>						<tr>							<td class="fieldName">Interviewer</td>							<td>								<xsl:for-each select="n1:encounter/n1:participant/n1:participantRole">									<xsl:if test="n1:playingEntity/n1:name">										<xsl:call-template name="show-name">											<xsl:with-param name="name" select="n1:playingEntity/n1:name"/>										</xsl:call-template>									</xsl:if>									<br/>									<xsl:if test="n1:addr | n1:telecom">										<xsl:call-template name="show-contactInfo">											<xsl:with-param name="contact" select="."/>										</xsl:call-template>									</xsl:if>								</xsl:for-each>							</td>							<td class="fieldName"/>							<td>								</td>						</tr>						<xsl:for-each select="n1:encounter/n1:entryRelationship">							<xsl:choose>								<xsl:when test="position()mod 2">									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<xsl:if test="position() = last()">										<td class="fieldName"/>										<td/>									</xsl:if>								</xsl:when>								<xsl:otherwise>									<td class="fieldName">										<xsl:value-of select="n1:observation/n1:code/@displayName"/>									</td>									<td>										<xsl:call-template name="display-value"/>									</td>									<tr/>								</xsl:otherwise>							</xsl:choose>						</xsl:for-each>					</tbody>				</table>			</xsl:for-each>		</xsl:if>	</xsl:template>	<xsl:template name="display-value">		<xsl:for-each select="n1:observation/n1:value">			<xsl:choose>				<xsl:when test="@displayName or @code">					<xsl:value-of select="@displayName"/>					<xsl:if test="@code"> (<xsl:value-of select="@code"/>)</xsl:if>				</xsl:when>				<xsl:when test="@value">					<xsl:call-template name="show-time">						<xsl:with-param name="datetime" select="../n1:value"/>					</xsl:call-template>				</xsl:when>				<xsl:when test="@extension">					<xsl:call-template name="get-entity-by-id">						<xsl:with-param name="entityId" select="@extension"/>					</xsl:call-template>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="."/>				</xsl:otherwise>			</xsl:choose>			<xsl:if test="position() != last()">				<xsl:text> | </xsl:text>			</xsl:if>		</xsl:for-each>	</xsl:template>	<xsl:template name="display-referenceRange">		<xsl:if test="n1:value/n1:low">			<xsl:value-of select="n1:value/n1:low/@value"/>			<xsl:text> </xsl:text>			<xsl:value-of select="n1:value/n1:low/@unit"/>		</xsl:if>		<xsl:if test="n1:value/n1:low and n1:value/n1:high"> - </xsl:if>		<xsl:if test="n1:value/n1:high">			<xsl:value-of select="n1:value/n1:high/@value"/>			<xsl:text> </xsl:text>			<xsl:value-of select="n1:value/n1:high/@unit"/>		</xsl:if>	</xsl:template>	<xsl:template name="get-entity-by-id">		<xsl:param name="entityId"/>		<xsl:for-each select="../../../../../n1:component/n1:section">			<xsl:if test="n1:code/@code='123-4567'">				<xsl:for-each select="n1:entry/n1:act/n1:participant/n1:participantRole/n1:id[@extension=$entityId]">					<xsl:if test="position()=1">						<xsl:if test="../n1:playingEntity/n1:name">							<xsl:call-template name="show-name">								<xsl:with-param name="name" select="../n1:playingEntity/n1:name"/>							</xsl:call-template>						</xsl:if>						<br/>						<xsl:if test="../n1:addr | ../n1:telecom">							<xsl:call-template name="show-contactInfo">								<xsl:with-param name="contact" select="../."/>							</xsl:call-template>						</xsl:if>					</xsl:if>				</xsl:for-each>			</xsl:if>		</xsl:for-each>		<xsl:for-each select="../../../../../../../n1:component/n1:section">			<xsl:if test="n1:code/@code='123-4567'">				<xsl:for-each select="n1:entry/n1:act/n1:participant/n1:participantRole/n1:id[extension=$entityId]">					<xsl:if test="position()=1">						<xsl:if test="../n1:playingEntity/n1:name">							<xsl:call-template name="show-name">								<xsl:with-param name="name" select="../n1:playingEntity/n1:name"/>							</xsl:call-template>						</xsl:if>						<br/>						<xsl:if test="../n1:addr | ../n1:telecom">							<xsl:call-template name="show-contactInfo">								<xsl:with-param name="contact" select="../."/>							</xsl:call-template>						</xsl:if>					</xsl:if>				</xsl:for-each>			</xsl:if>		</xsl:for-each>	</xsl:template>	<xsl:template name="show-period">		<xsl:text>Every </xsl:text>		<xsl:value-of select="n1:period/@value"/>		<xsl:choose>			<xsl:when test="n1:period/@unit='h'">				<xsl:text> Hour</xsl:text>			</xsl:when>			<xsl:when test="n1:period/@unit='d'">				<xsl:text> Day</xsl:text>			</xsl:when>			<xsl:when test="n1:period/@unit='wk'">				<xsl:text> Week</xsl:text>			</xsl:when>			<xsl:when test="n1:period/@unit='mo'">				<xsl:text> Month</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<xsl:template name="show-width">		<xsl:value-of select="n1:width/@value"/>		<xsl:choose>			<xsl:when test="n1:width/@unit='h'">				<xsl:text> Hour</xsl:text>			</xsl:when>			<xsl:when test="n1:width/@unit='d'">				<xsl:text> Day</xsl:text>			</xsl:when>			<xsl:when test="n1:width/@unit='wk'">				<xsl:text> Week</xsl:text>			</xsl:when>			<xsl:when test="n1:width/@unit='mo'">				<xsl:text> Month</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- nested component/section -->	<xsl:template name="nestedSection">		<xsl:param name="margin"/>		<h4 style="margin-left : {$margin}em;">			<xsl:value-of select="n1:title"/>		</h4>		<div style="margin-left : {$margin}em;">			<xsl:apply-templates select="n1:text"/>		</div>		<xsl:for-each select="n1:component/n1:section">			<xsl:call-template name="nestedSection">				<xsl:with-param name="margin" select="2*$margin"/>			</xsl:call-template>		</xsl:for-each>	</xsl:template>	<!--   paragraph  -->	<xsl:template match="n1:paragraph">		<p>			<xsl:apply-templates/>		</p>	</xsl:template>	<!--   pre format  -->	<xsl:template match="n1:pre">		<pre>			<xsl:apply-templates/>		</pre>	</xsl:template>	<!--   Content w/ deleted text is hidden -->	<xsl:template match="n1:content[@revised='delete']"/>	<!--   content  -->	<xsl:template match="n1:content">		<span>			<xsl:apply-templates select="@styleCode"/>			<xsl:apply-templates/>		</span>	</xsl:template>	<!-- line break -->	<xsl:template match="n1:br">		<xsl:element name='br'>			<xsl:apply-templates/>		</xsl:element>	</xsl:template>	<!--   list  -->	<xsl:template match="n1:list">		<xsl:if test="n1:caption">			<p>				<b>					<xsl:apply-templates select="n1:caption"/>				</b>			</p>		</xsl:if>		<ul>			<xsl:for-each select="n1:item">				<li>					<xsl:apply-templates/>				</li>			</xsl:for-each>		</ul>	</xsl:template>	<xsl:template match="n1:list[@listType='ordered']">		<xsl:if test="n1:caption">			<span style="font-weight:bold; ">				<xsl:apply-templates select="n1:caption"/>			</span>		</xsl:if>		<ol>			<xsl:for-each select="n1:item">				<li>					<xsl:apply-templates/>				</li>			</xsl:for-each>		</ol>	</xsl:template>	<!--   caption  -->	<xsl:template match="n1:caption">		<xsl:apply-templates/>		<xsl:text>: </xsl:text>	</xsl:template>	<!--  Tables   -->	<!--    <xsl:template match="n1:table/@*|n1:thead/@*|n1:tfoot/@*|n1:tbody/@*|n1:colgroup/@*|n1:col/@*|n1:tr/@*|n1:th/@*|n1:td/@*">        <xsl:copy>            <xsl:copy-of select="@*"/>            <xsl:apply-templates/>        </xsl:copy>    </xsl:template>    -->	<xsl:variable name="table-elem-attrs">		<in:tableElems>			<in:elem name="table">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="summary"/>				<in:attr name="width"/>				<in:attr name="border"/>				<in:attr name="frame"/>				<in:attr name="rules"/>				<in:attr name="cellspacing"/>				<in:attr name="cellpadding"/>			</in:elem>			<in:elem name="thead">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="tfoot">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="tbody">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="colgroup">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="span"/>				<in:attr name="width"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="col">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="span"/>				<in:attr name="width"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="tr">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="th">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="abbr"/>				<in:attr name="axis"/>				<in:attr name="headers"/>				<in:attr name="scope"/>				<in:attr name="rowspan"/>				<in:attr name="colspan"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>			<in:elem name="td">				<in:attr name="ID"/>				<in:attr name="language"/>				<in:attr name="styleCode"/>				<in:attr name="abbr"/>				<in:attr name="axis"/>				<in:attr name="headers"/>				<in:attr name="scope"/>				<in:attr name="rowspan"/>				<in:attr name="colspan"/>				<in:attr name="align"/>				<in:attr name="char"/>				<in:attr name="charoff"/>				<in:attr name="valign"/>			</in:elem>		</in:tableElems>	</xsl:variable>	<xsl:template name="output-attrs">		<xsl:variable name="elem-name" select="local-name(.)"/>		<xsl:for-each select="@*">			<xsl:variable name="attr-name" select="local-name(.)"/>			<xsl:variable name="source" select="."/>			<xsl:choose>				<xsl:when test="$attr-name='styleCode'">					<xsl:apply-templates select="."/>				</xsl:when>				<xsl:when test="not(document('')/xsl:stylesheet/xsl:variable[@name='table-elem-attrs']/in:tableElems/in:elem[@name=$elem-name]/in:attr[@name=$attr-name])">					<xsl:message>						<xsl:value-of select="$attr-name"/> is not legal in <xsl:value-of select="$elem-name"/>					</xsl:message>				</xsl:when>				<xsl:otherwise>					<xsl:copy-of select="."/>				</xsl:otherwise>			</xsl:choose>		</xsl:for-each>	</xsl:template>	<xsl:template match="n1:table | n1:thead | n1:tfoot | n1:tbody | n1:colgroup | n1:col | n1:tr | n1:th | n1:td">		<xsl:element name="{local-name()}">			<xsl:call-template name="output-attrs"/>			<xsl:apply-templates/>		</xsl:element>	</xsl:template>	<xsl:template match="n1:table/n1:caption">		<span style="font-weight:bold; ">			<xsl:apply-templates/>		</span>	</xsl:template>	<!--   RenderMultiMedia     this currently only handles GIF's and JPEG's.  It could, however,     be extended by including other image MIME types in the predicate     and/or by generating <object> or <applet> tag with the correct     params depending on the media type  @ID  =$imageRef  referencedObject     -->	<xsl:template name="check-external-image-whitelist">		<xsl:param name="current-whitelist"/>		<xsl:param name="image-uri"/>		<xsl:choose>			<xsl:when test="string-length($current-whitelist) &gt; 0">				<xsl:variable name="whitelist-item">					<xsl:choose>						<xsl:when test="contains($current-whitelist,'|')">							<xsl:value-of select="substring-before($current-whitelist,'|')"/>						</xsl:when>						<xsl:otherwise>							<xsl:value-of select="$current-whitelist"/>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:choose>					<xsl:when test="starts-with($image-uri,$whitelist-item)">						<br clear="all"/>						<xsl:element name="img">							<xsl:attribute name="src"><xsl:value-of select="$image-uri"/></xsl:attribute>						</xsl:element>						<xsl:message>							<xsl:value-of select="$image-uri"/> is in the whitelist</xsl:message>					</xsl:when>					<xsl:otherwise>						<xsl:call-template name="check-external-image-whitelist">							<xsl:with-param name="current-whitelist" select="substring-after($current-whitelist,'|')"/>							<xsl:with-param name="image-uri" select="$image-uri"/>						</xsl:call-template>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<p>WARNING: non-local image found <xsl:value-of select="$image-uri"/>. Removing. If you wish non-local images preserved please set the limit-external-images param to 'no'.</p>				<xsl:message>WARNING: non-local image found <xsl:value-of select="$image-uri"/>. Removing. If you wish non-local images preserved please set the limit-external-images param to 'no'.</xsl:message>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="n1:renderMultiMedia">		<xsl:variable name="imageRef" select="@referencedObject"/>		<xsl:choose>			<xsl:when test="//n1:regionOfInterest[@ID=$imageRef]">				<!-- Here is where the Region of Interest image referencing goes -->				<xsl:if test="//n1:regionOfInterest[@ID=$imageRef]//n1:observationMedia/n1:value[@mediaType='image/gif' or @mediaType='image/jpeg']">					<xsl:variable name="image-uri" select="//n1:regionOfInterest[@ID=$imageRef]//n1:observationMedia/n1:value/n1:reference/@value"/>					<xsl:choose>						<xsl:when test="$limit-external-images='yes' and (contains($image-uri,':') or starts-with($image-uri,'\\'))">							<xsl:call-template name="check-external-image-whitelist">								<xsl:with-param name="current-whitelist" select="$external-image-whitelist"/>								<xsl:with-param name="image-uri" select="$image-uri"/>							</xsl:call-template>							<!--                            <p>WARNING: non-local image found <xsl:value-of select="$image-uri"/>. Removing. If you wish non-local images preserved please set the limit-external-images param to 'no'.</p>                            <xsl:message>WARNING: non-local image found <xsl:value-of select="$image-uri"/>. Removing. If you wish non-local images preserved please set the limit-external-images param to 'no'.</xsl:message>                            -->						</xsl:when>						<!--                        <xsl:when test="$limit-external-images='yes' and starts-with($image-uri,'\\')">                            <p>WARNING: non-local image found <xsl:value-of select="$image-uri"/></p>                            <xsl:message>WARNING: non-local image found <xsl:value-of select="$image-uri"/>. Removing. If you wish non-local images preserved please set the limit-external-images param to 'no'.</xsl:message>                        </xsl:when>                        -->						<xsl:otherwise>							<br clear="all"/>							<xsl:element name="img">								<xsl:attribute name="src"><xsl:value-of select="$image-uri"/></xsl:attribute>							</xsl:element>						</xsl:otherwise>					</xsl:choose>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<!-- Here is where the direct MultiMedia image referencing goes -->				<xsl:if test="//n1:observationMedia[@ID=$imageRef]/n1:value[@mediaType='image/gif' or @mediaType='image/jpeg']">					<br clear="all"/>					<xsl:element name="img">						<xsl:attribute name="src"><xsl:value-of select="//n1:observationMedia[@ID=$imageRef]/n1:value/n1:reference/@value"/></xsl:attribute>					</xsl:element>				</xsl:if>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!--    Stylecode processing     Supports Bold, Underline and Italics display     -->	<xsl:template match="@styleCode">		<xsl:attribute name="class"><xsl:value-of select="."/></xsl:attribute>	</xsl:template>	<!--    Superscript or Subscript   -->	<xsl:template match="n1:sup">		<xsl:element name="sup">			<xsl:apply-templates/>		</xsl:element>	</xsl:template>	<xsl:template match="n1:sub">		<xsl:element name="sub">			<xsl:apply-templates/>		</xsl:element>	</xsl:template>	<!-- show-signature -->	<xsl:template name="show-sig">		<xsl:param name="sig"/>		<xsl:choose>			<xsl:when test="$sig/@code =&apos;S&apos;">				<xsl:text>signed</xsl:text>			</xsl:when>			<xsl:when test="$sig/@code=&apos;I&apos;">				<xsl:text>intended</xsl:text>			</xsl:when>			<xsl:when test="$sig/@code=&apos;X&apos;">				<xsl:text>signature required</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<!--  show-id -->	<xsl:template name="show-id">		<xsl:param name="id" select="."/>		<xsl:choose>			<xsl:when test="not($id)">				<xsl:if test="not(@nullFlavor)">					<xsl:if test="@extension">						<xsl:value-of select="@extension"/>					</xsl:if>					<xsl:text> </xsl:text>					<xsl:if test="@root">						(<xsl:value-of select="@root"/>)					</xsl:if>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<xsl:if test="not($id/@nullFlavor)">					<xsl:if test="$id/@extension">						<xsl:value-of select="$id/@extension"/>					</xsl:if>					<xsl:text> </xsl:text>					<xsl:if test="$id/@root">						(<xsl:value-of select="$id/@root"/>)					</xsl:if>				</xsl:if>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- show-name  -->	<xsl:template name="show-name">		<xsl:param name="name"/>		<xsl:choose>			<xsl:when test="$name/n1:family">				<xsl:if test="$name/n1:prefix">					<xsl:value-of select="$name/n1:prefix"/>					<xsl:text> </xsl:text>				</xsl:if>				<xsl:value-of select="$name/n1:given"/>				<xsl:text> </xsl:text>				<xsl:value-of select="$name/n1:family"/>				<xsl:if test="$name/n1:suffix">					<xsl:text>, </xsl:text>					<xsl:value-of select="$name/n1:suffix"/>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$name"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- show-gender  -->	<xsl:template name="show-gender">		<xsl:choose>			<xsl:when test="@code   = &apos;M&apos;">				<xsl:text>Male</xsl:text>			</xsl:when>			<xsl:when test="@code  = &apos;F&apos;">				<xsl:text>Female</xsl:text>			</xsl:when>			<xsl:when test="@code  = &apos;U&apos;">				<xsl:text>Undifferentiated</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- show-race-ethnicity  -->	<xsl:template name="show-race-ethnicity">		<xsl:choose>			<xsl:when test="@displayName">				<xsl:value-of select="@displayName"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="@code"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- show-contactInfo -->	<xsl:template name="show-contactInfo">		<xsl:param name="contact"/>		<xsl:call-template name="show-address">			<xsl:with-param name="address" select="$contact/n1:addr"/>		</xsl:call-template>		<xsl:call-template name="show-telecom">			<xsl:with-param name="telecom" select="$contact/n1:telecom"/>		</xsl:call-template>	</xsl:template>	<!-- show-address -->	<xsl:template name="show-address">		<xsl:param name="address"/>		<xsl:choose>			<xsl:when test="$address">				<xsl:if test="$address/@use">					<xsl:text> </xsl:text>					<xsl:call-template name="translateTelecomCode">						<xsl:with-param name="code" select="$address/@use"/>					</xsl:call-template>					<xsl:text>:</xsl:text>					<br/>				</xsl:if>				<xsl:for-each select="$address/n1:streetAddressLine">					<xsl:value-of select="."/>					<br/>				</xsl:for-each>				<xsl:if test="$address/n1:streetName">					<xsl:value-of select="$address/n1:streetName"/>					<xsl:text> </xsl:text>					<xsl:value-of select="$address/n1:houseNumber"/>					<br/>				</xsl:if>				<xsl:if test="string-length($address/n1:city)>0">					<xsl:value-of select="$address/n1:city"/>				</xsl:if>				<xsl:if test="string-length($address/n1:county)>0">					<xsl:text>,&#160;</xsl:text>					<xsl:value-of select="substring-before(substring-after($address/n1:county,'^'),'^')"/>					<xsl:if test="substring-before(substring-after($address/n1:county,'^'),'^')=''">						<xsl:value-of select="$address/n1:county"/>					</xsl:if>				</xsl:if>				<xsl:if test="string-length($address/n1:state)>0">					<xsl:text>,&#160;</xsl:text>					<xsl:value-of select="substring-before(substring-after($address/n1:state,'^'),'^')"/>					<xsl:if test="substring-before(substring-after($address/n1:state,'^'),'^')=''">						<xsl:value-of select="$address/n1:state"/>					</xsl:if>				</xsl:if>				<xsl:if test="string-length($address/n1:postalCode)>0">					<xsl:text>&#160;</xsl:text>					<xsl:value-of select="$address/n1:postalCode"/>				</xsl:if>				<xsl:if test="string-length($address/n1:country)>0">					<xsl:text>,&#160;</xsl:text>					<xsl:value-of select="substring-before(substring-after($address/n1:country,'^'),'^')"/>					<xsl:if test="substring-before(substring-after($address/n1:country,'^'),'^')=''">						<xsl:value-of select="$address/n1:country"/>					</xsl:if>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<xsl:text>Address not available</xsl:text>			</xsl:otherwise>		</xsl:choose>		<br/>	</xsl:template>	<!-- show-telecom -->	<xsl:template name="show-telecom">		<xsl:param name="telecom"/>		<xsl:choose>			<xsl:when test="$telecom">				<xsl:variable name="type" select="substring-before($telecom/@value, ':')"/>				<xsl:variable name="value" select="substring-after($telecom/@value, ':')"/>				<xsl:variable name="type1" select="$telecom/@value"/>				<xsl:choose>					<xsl:when test="$type!='' and $value!=''">						<xsl:value-of select="$value"/>						<xsl:if test="$telecom/@use">							<xsl:text> (</xsl:text>							<xsl:call-template name="translateTelecomCode">								<xsl:with-param name="code">									<xsl:value-of select="$telecom/@use"/>								</xsl:with-param>							</xsl:call-template>							<xsl:text>)</xsl:text>						</xsl:if>					</xsl:when>					<xsl:when test="$type!=''">						<xsl:value-of select="$type"/>						<xsl:if test="$telecom/@use">							<xsl:text> (</xsl:text>							<xsl:call-template name="translateTelecomCode">								<xsl:with-param name="code">									<xsl:value-of select="$telecom/@use"/>								</xsl:with-param>							</xsl:call-template>							<xsl:text>)</xsl:text>						</xsl:if>					</xsl:when>					<xsl:when test="$type1!=''">						<xsl:value-of select="$type1"/>						<xsl:if test="$telecom/@use">							<xsl:text> (</xsl:text>							<xsl:call-template name="translateTelecomCode">								<xsl:with-param name="code">									<xsl:value-of select="$telecom/@use"/>								</xsl:with-param>							</xsl:call-template>							<xsl:text>)</xsl:text>						</xsl:if>					</xsl:when>					<xsl:otherwise>						<xsl:text>Telecom information not available</xsl:text>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:text>Telecom information not available</xsl:text>			</xsl:otherwise>		</xsl:choose>		<br/>	</xsl:template>	<!-- show-recipientType -->	<xsl:template name="show-recipientType">		<xsl:param name="typeCode"/>		<xsl:choose>			<xsl:when test="$typeCode='PRCP'">Primary Recipient:</xsl:when>			<xsl:when test="$typeCode='TRC'">Secondary Recipient:</xsl:when>			<xsl:otherwise>Recipient:</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- Convert Telecom URL to display text -->	<xsl:template name="translateTelecomCode">		<xsl:param name="code"/>		<!--xsl:value-of select="document('voc.xml')/systems/system[@root=$code/@codeSystem]/code[@value=$code/@code]/@displayName"/-->		<!--xsl:value-of select="document('codes.xml')/*/code[@code=$code]/@display"/-->		<xsl:choose>			<!-- lookup table Telecom URI -->			<xsl:when test="$code='tel'">				<xsl:text>Tel</xsl:text>			</xsl:when>			<xsl:when test="$code='fax'">				<xsl:text>Fax</xsl:text>			</xsl:when>			<xsl:when test="$code='http'">				<xsl:text>Web</xsl:text>			</xsl:when>			<xsl:when test="$code='mailto'">				<xsl:text>Mail</xsl:text>			</xsl:when>			<xsl:when test="$code='H'">				<xsl:text>Home</xsl:text>			</xsl:when>			<xsl:when test="$code='HV'">				<xsl:text>Vacation Home</xsl:text>			</xsl:when>			<xsl:when test="$code='HP'">				<xsl:text>Primary Home</xsl:text>			</xsl:when>			<xsl:when test="$code='WP'">				<xsl:text>Work Place</xsl:text>			</xsl:when>			<xsl:when test="$code='PUB'">				<xsl:text>Pub</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>{$code='</xsl:text>				<xsl:value-of select="$code"/>				<xsl:text>'?}</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- convert RoleClassAssociative code to display text -->	<xsl:template name="translateRoleAssoCode">		<xsl:param name="classCode"/>		<xsl:param name="code"/>		<xsl:choose>			<xsl:when test="$classCode='AFFL'">				<xsl:text>affiliate</xsl:text>			</xsl:when>			<xsl:when test="$classCode='AGNT'">				<xsl:text>agent</xsl:text>			</xsl:when>			<xsl:when test="$classCode='ASSIGNED'">				<xsl:text>assigned entity</xsl:text>			</xsl:when>			<xsl:when test="$classCode='COMPAR'">				<xsl:text>commissioning party</xsl:text>			</xsl:when>			<xsl:when test="$classCode='CON'">				<xsl:text>contact</xsl:text>			</xsl:when>			<xsl:when test="$classCode='ECON'">				<xsl:text>emergency contact</xsl:text>			</xsl:when>			<xsl:when test="$classCode='NOK'">				<xsl:text>next of kin</xsl:text>			</xsl:when>			<xsl:when test="$classCode='SGNOFF'">				<xsl:text>signing authority</xsl:text>			</xsl:when>			<xsl:when test="$classCode='GUARD'">				<xsl:text>guardian</xsl:text>			</xsl:when>			<xsl:when test="$classCode='GUAR'">				<xsl:text>guardian</xsl:text>			</xsl:when>			<xsl:when test="$classCode='CIT'">				<xsl:text>citizen</xsl:text>			</xsl:when>			<xsl:when test="$classCode='COVPTY'">				<xsl:text>covered party</xsl:text>			</xsl:when>			<xsl:when test="$classCode='PRS'">				<xsl:text>personal relationship</xsl:text>			</xsl:when>			<xsl:when test="$classCode='CAREGIVER'">				<xsl:text>care giver</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>{$classCode='</xsl:text>				<xsl:value-of select="$classCode"/>				<xsl:text>'?}</xsl:text>			</xsl:otherwise>		</xsl:choose>		<xsl:if test="($code/@code) and ($code/@codeSystem='2.16.840.1.113883.5.111')">			<xsl:text> </xsl:text>			<xsl:choose>				<xsl:when test="$code/@code='FTH'">					<xsl:text>(Father)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='MTH'">					<xsl:text>(Mother)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='NPRN'">					<xsl:text>(Natural parent)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='STPPRN'">					<xsl:text>(Step parent)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='SONC'">					<xsl:text>(Son)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='DAUC'">					<xsl:text>(Daughter)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='CHILD'">					<xsl:text>(Child)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='EXT'">					<xsl:text>(Extended family member)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='NBOR'">					<xsl:text>(Neighbor)</xsl:text>				</xsl:when>				<xsl:when test="$code/@code='SIGOTHR'">					<xsl:text>(Significant other)</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>{$code/@code='</xsl:text>					<xsl:value-of select="$code/@code"/>					<xsl:text>'?}</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!-- show time -->	<xsl:template name="show-time">		<xsl:param name="datetime"/>		<xsl:choose>			<xsl:when test="not($datetime)">				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="@value"/>				</xsl:call-template>				<xsl:text> </xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="$datetime/@value"/>				</xsl:call-template>				<xsl:text> </xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- Effective Time -->	<xsl:template name="effectiveTime">		<xsl:choose>			<xsl:when test="n1:effectiveTime/@value">				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="n1:effectiveTime/@value"/>				</xsl:call-template>			</xsl:when>			<xsl:when test="n1:effectiveTime/n1:low/@value and n1:effectiveTime/n1:high/@value">				<xsl:if test="string-length(n1:effectiveTime/n1:low/@value)=4">					<xsl:value-of select="n1:effectiveTime/n1:low/@value"/>				</xsl:if>				<xsl:if test="string-length(n1:effectiveTime/n1:low/@value)>4">					<xsl:call-template name="formatDateTime">						<xsl:with-param name="date" select="n1:effectiveTime/n1:low/@value"/>					</xsl:call-template>				</xsl:if> - 				<xsl:if test="string-length(n1:effectiveTime/n1:high/@value)=4">					<xsl:value-of select="n1:effectiveTime/n1:high/@value"/>				</xsl:if>				<xsl:if test="string-length(n1:effectiveTime/n1:high/@value)>4">					<xsl:call-template name="formatDateTime">						<xsl:with-param name="date" select="n1:effectiveTime/n1:high/@value"/>					</xsl:call-template>				</xsl:if>			</xsl:when>			<xsl:when test="n1:effectiveTime/n1:width and n1:effectiveTime/n1:high/@value">				For <xsl:value-of select="n1:effectiveTime/n1:width/@value"/><![CDATA[ ]]><xsl:value-of select="n1:effectiveTime/n1:width/@unit"/> before 				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="n1:effectiveTime/n1:high/@value"/>				</xsl:call-template>			</xsl:when>			<xsl:when test="n1:effectiveTime/n1:width and n1:effectiveTime/n1:low/@value">			After <xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="n1:effectiveTime/n1:low/@value"/>				</xsl:call-template> for				<xsl:value-of select="n1:effectiveTime/n1:width/@value"/><![CDATA[ ]]><xsl:value-of select="n1:effectiveTime/n1:width/@unit"/>			</xsl:when>			<xsl:when test="n1:effectiveTime/n1:low/@value or n1:effectiveTime/n1:high/@value">				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="n1:effectiveTime/n1:low/@value"/>				</xsl:call-template>				<xsl:call-template name="formatDateTime">					<xsl:with-param name="date" select="n1:effectiveTime/n1:high/@value"/>				</xsl:call-template>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- paticipant facility and date -->	<xsl:template name="facilityAndDates">		<table class="header_table">			<tbody>				<!-- facility id -->				<tr>					<td class="td_header_role_name">						<span class="td_label">							<xsl:text>Facility ID</xsl:text>						</span>					</td>					<td class="td_header_role_value">						<xsl:choose>							<xsl:when test="count(/n1:ClinicalDocument/n1:participant                                      [@typeCode='LOC'][@contextControlCode='OP']                                      /n1:associatedEntity[@classCode='SDLOC']/n1:id)&gt;0">								<!-- change context node -->								<xsl:for-each select="/n1:ClinicalDocument/n1:participant                                      [@typeCode='LOC'][@contextControlCode='OP']                                      /n1:associatedEntity[@classCode='SDLOC']/n1:id">									<xsl:call-template name="show-id"/>									<!-- change context node again, for the code -->									<xsl:for-each select="../n1:code">										<xsl:text> (</xsl:text>										<xsl:call-template name="show-code">											<xsl:with-param name="code" select="."/>										</xsl:call-template>										<xsl:text>)</xsl:text>									</xsl:for-each>								</xsl:for-each>							</xsl:when>							<xsl:otherwise>                                Not available                            </xsl:otherwise>						</xsl:choose>					</td>				</tr>				<!-- Period reported -->				<tr>					<td class="td_header_role_name">						<span class="td_label">							<xsl:text>First day of period reported</xsl:text>						</span>					</td>					<td class="td_header_role_value">						<xsl:call-template name="show-time">							<xsl:with-param name="datetime" select="/n1:ClinicalDocument/n1:documentationOf                                      /n1:serviceEvent/n1:effectiveTime/n1:low"/>						</xsl:call-template>					</td>				</tr>				<tr>					<td class="td_header_role_name">						<span class="td_label">							<xsl:text>Last day of period reported</xsl:text>						</span>					</td>					<td class="td_header_role_value">						<xsl:call-template name="show-time">							<xsl:with-param name="datetime" select="/n1:ClinicalDocument/n1:documentationOf                                      /n1:serviceEvent/n1:effectiveTime/n1:high"/>						</xsl:call-template>					</td>				</tr>			</tbody>		</table>	</xsl:template>	<!-- show assignedEntity -->	<xsl:template name="show-assignedEntity">		<xsl:param name="asgnEntity"/>		<xsl:choose>			<xsl:when test="$asgnEntity/n1:assignedPerson/n1:name">				<xsl:call-template name="show-name">					<xsl:with-param name="name" select="$asgnEntity/n1:assignedPerson/n1:name"/>				</xsl:call-template>				<xsl:if test="$asgnEntity/n1:representedOrganization/n1:name">					<xsl:text> of </xsl:text>					<xsl:value-of select="$asgnEntity/n1:representedOrganization/n1:name"/>				</xsl:if>			</xsl:when>			<xsl:when test="$asgnEntity/n1:representedOrganization">				<xsl:value-of select="$asgnEntity/n1:representedOrganization/n1:name"/>			</xsl:when>			<xsl:otherwise>				<xsl:for-each select="$asgnEntity/n1:id">					<xsl:call-template name="show-id"/>					<xsl:choose>						<xsl:when test="position()!=last()">							<xsl:text>, </xsl:text>						</xsl:when>						<xsl:otherwise>							<br/>						</xsl:otherwise>					</xsl:choose>				</xsl:for-each>			</xsl:otherwise>		</xsl:choose>		<br/>		<xsl:call-template name="show-contactInfo">			<xsl:with-param name="contact" select="$asgnEntity"/>		</xsl:call-template>	</xsl:template>	<!-- show relatedEntity -->	<xsl:template name="show-relatedEntity">		<xsl:param name="relatedEntity"/>		<xsl:choose>			<xsl:when test="$relatedEntity/n1:relatedPerson/n1:name">				<xsl:call-template name="show-name">					<xsl:with-param name="name" select="$relatedEntity/n1:relatedPerson/n1:name"/>				</xsl:call-template>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- show associatedEntity -->	<xsl:template name="show-associatedEntity">		<xsl:param name="assoEntity"/>		<xsl:choose>			<xsl:when test="$assoEntity/n1:associatedPerson">				<xsl:for-each select="$assoEntity/n1:associatedPerson/n1:name">					<xsl:call-template name="show-name">						<xsl:with-param name="name" select="."/>					</xsl:call-template>					<br/>				</xsl:for-each>			</xsl:when>			<xsl:when test="$assoEntity/n1:scopingOrganization">				<xsl:for-each select="$assoEntity/n1:scopingOrganization">					<xsl:if test="n1:name">						<xsl:call-template name="show-name">							<xsl:with-param name="name" select="n1:name"/>						</xsl:call-template>						<br/>					</xsl:if>					<xsl:if test="n1:standardIndustryClassCode">						<xsl:value-of select="n1:standardIndustryClassCode/@displayName"/>						<xsl:text> code:</xsl:text>						<xsl:value-of select="n1:standardIndustryClassCode/@code"/>					</xsl:if>				</xsl:for-each>			</xsl:when>			<xsl:when test="$assoEntity/n1:code">				<xsl:call-template name="show-code">					<xsl:with-param name="code" select="$assoEntity/n1:code"/>				</xsl:call-template>			</xsl:when>			<xsl:when test="$assoEntity/n1:id">				<xsl:value-of select="$assoEntity/n1:id/@extension"/>				<xsl:text> </xsl:text>				<xsl:value-of select="$assoEntity/n1:id/@root"/>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- show code     if originalText present, return it, otherwise, check and return attribute: display name     -->	<xsl:template name="show-code">		<xsl:param name="code"/>		<xsl:variable name="this-codeSystem">			<xsl:value-of select="$code/@codeSystem"/>		</xsl:variable>		<xsl:variable name="this-code">			<xsl:value-of select="$code/@code"/>		</xsl:variable>		<xsl:choose>			<xsl:when test="$code/n1:originalText">				<xsl:value-of select="$code/n1:originalText"/>			</xsl:when>			<xsl:when test="$code/@displayName">				<xsl:value-of select="$code/@displayName"/>			</xsl:when>			<!--         <xsl:when test="$the-valuesets/*/voc:system[@root=$this-codeSystem]/voc:code[@value=$this-code]/@displayName">           <xsl:value-of select="$the-valuesets/*/voc:system[@root=$this-codeSystem]/voc:code[@value=$this-code]/@displayName"/>         </xsl:when>         -->			<xsl:otherwise>				<xsl:value-of select="$this-code"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<!-- show classCode -->	<xsl:template name="show-actClassCode">		<xsl:param name="clsCode"/>		<xsl:choose>			<xsl:when test=" $clsCode = 'ACT' ">				<xsl:text>healthcare service</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'ACCM' ">				<xsl:text>accommodation</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'ACCT' ">				<xsl:text>account</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'ACSN' ">				<xsl:text>accession</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'ADJUD' ">				<xsl:text>financial adjudication</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'CONS' ">				<xsl:text>consent</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'CONTREG' ">				<xsl:text>container registration</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'CTTEVENT' ">				<xsl:text>clinical trial timepoint event</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'DISPACT' ">				<xsl:text>disciplinary action</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'ENC' ">				<xsl:text>encounter</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'INC' ">				<xsl:text>incident</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'INFRM' ">				<xsl:text>inform</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'INVE' ">				<xsl:text>invoice element</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'LIST' ">				<xsl:text>working list</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'MPROT' ">				<xsl:text>monitoring program</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'PCPR' ">				<xsl:text>care provision</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'PROC' ">				<xsl:text>procedure</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'REG' ">				<xsl:text>registration</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'REV' ">				<xsl:text>review</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'SBADM' ">				<xsl:text>substance administration</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'SPCTRT' ">				<xsl:text>speciment treatment</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'SUBST' ">				<xsl:text>substitution</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'TRNS' ">				<xsl:text>transportation</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'VERIF' ">				<xsl:text>verification</xsl:text>			</xsl:when>			<xsl:when test=" $clsCode = 'XACT' ">				<xsl:text>financial transaction</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- show participationType -->	<xsl:template name="show-participationType">		<xsl:param name="ptype"/>		<xsl:choose>			<xsl:when test=" $ptype='PPRF' ">				<xsl:text>primary performer</xsl:text>			</xsl:when>			<xsl:when test=" $ptype='PRF' ">				<xsl:text>performer</xsl:text>			</xsl:when>			<xsl:when test=" $ptype='VRF' ">				<xsl:text>verifier</xsl:text>			</xsl:when>			<xsl:when test=" $ptype='SPRF' ">				<xsl:text>secondary performer</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<!-- show participationFunction -->	<xsl:template name="show-participationFunction">		<xsl:param name="pFunction"/>		<xsl:choose>			<!-- From the HL7 v3 ParticipationFunction code system -->			<xsl:when test=" $pFunction = 'ADMPHYS' ">				<xsl:text>(admitting physician)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'ANEST' ">				<xsl:text>(anesthesist)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'ANRS' ">				<xsl:text>(anesthesia nurse)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'ATTPHYS' ">				<xsl:text>(attending physician)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'DISPHYS' ">				<xsl:text>(discharging physician)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'FASST' ">				<xsl:text>(first assistant surgeon)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'MDWF' ">				<xsl:text>(midwife)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'NASST' ">				<xsl:text>(nurse assistant)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'PCP' ">				<xsl:text>(primary care physician)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'PRISURG' ">				<xsl:text>(primary surgeon)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'RNDPHYS' ">				<xsl:text>(rounding physician)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'SASST' ">				<xsl:text>(second assistant surgeon)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'SNRS' ">				<xsl:text>(scrub nurse)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'TASST' ">				<xsl:text>(third assistant)</xsl:text>			</xsl:when>			<!-- From the HL7 v2 Provider Role code system (2.16.840.1.113883.12.443) which is used by HITSP -->			<xsl:when test=" $pFunction = 'CP' ">				<xsl:text>(consulting provider)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'PP' ">				<xsl:text>(primary care provider)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'RP' ">				<xsl:text>(referring provider)</xsl:text>			</xsl:when>			<xsl:when test=" $pFunction = 'MP' ">				<xsl:text>(medical home provider)</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<xsl:template name="formatDateTime">		<xsl:param name="date"/>		<!-- month -->		<xsl:variable name="month" select="substring ($date, 5, 2)"/>		<xsl:choose>			<xsl:when test="$month='01'">				<xsl:text>January </xsl:text>			</xsl:when>			<xsl:when test="$month='02'">				<xsl:text>February </xsl:text>			</xsl:when>			<xsl:when test="$month='03'">				<xsl:text>March </xsl:text>			</xsl:when>			<xsl:when test="$month='04'">				<xsl:text>April </xsl:text>			</xsl:when>			<xsl:when test="$month='05'">				<xsl:text>May </xsl:text>			</xsl:when>			<xsl:when test="$month='06'">				<xsl:text>June </xsl:text>			</xsl:when>			<xsl:when test="$month='07'">				<xsl:text>July </xsl:text>			</xsl:when>			<xsl:when test="$month='08'">				<xsl:text>August </xsl:text>			</xsl:when>			<xsl:when test="$month='09'">				<xsl:text>September </xsl:text>			</xsl:when>			<xsl:when test="$month='10'">				<xsl:text>October </xsl:text>			</xsl:when>			<xsl:when test="$month='11'">				<xsl:text>November </xsl:text>			</xsl:when>			<xsl:when test="$month='12'">				<xsl:text>December </xsl:text>			</xsl:when>		</xsl:choose>		<!-- day -->		<xsl:choose>			<xsl:when test='substring ($date, 7, 1)="0"'>				<xsl:value-of select="substring ($date, 8, 1)"/>				<xsl:if test="string-length($date) > 0">					<xsl:text>, </xsl:text>				</xsl:if>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="substring ($date, 7, 2)"/>				<xsl:if test="string-length($date) > 0">					<xsl:text>, </xsl:text>				</xsl:if>			</xsl:otherwise>		</xsl:choose>		<!-- year -->		<xsl:value-of select="substring ($date, 1, 4)"/>		<!-- time and US timezone -->		<xsl:if test="string-length($date) > 8">			<xsl:text>, </xsl:text>			<!-- time -->			<xsl:variable name="time">				<xsl:value-of select="substring($date,9,6)"/>			</xsl:variable>			<xsl:variable name="hh">				<xsl:value-of select="substring($time,1,2)"/>			</xsl:variable>			<xsl:variable name="mm">				<xsl:value-of select="substring($time,3,2)"/>			</xsl:variable>			<xsl:variable name="ss">				<xsl:value-of select="substring($time,5,2)"/>			</xsl:variable>			<xsl:if test="string-length($hh)&gt;1">				<xsl:value-of select="$hh"/>				<xsl:if test="string-length($mm)&gt;1 and not(contains($mm,'-')) and not (contains($mm,'+'))">					<xsl:text>:</xsl:text>					<xsl:value-of select="$mm"/>					<xsl:if test="string-length($ss)&gt;1 and not(contains($ss,'-')) and not (contains($ss,'+'))">						<xsl:text>:</xsl:text>						<xsl:value-of select="$ss"/>					</xsl:if>				</xsl:if>			</xsl:if>			<!-- time zone -->			<xsl:variable name="tzon">				<xsl:choose>					<xsl:when test="contains($date,'+')">						<xsl:text>+</xsl:text>						<xsl:value-of select="substring-after($date, '+')"/>					</xsl:when>					<xsl:when test="contains($date,'-')">						<xsl:text>-</xsl:text>						<xsl:value-of select="substring-after($date, '-')"/>					</xsl:when>				</xsl:choose>			</xsl:variable>			<xsl:choose>				<!-- reference: http://www.timeanddate.com/library/abbreviations/timezones/na/ -->				<xsl:when test="$tzon = '-0500' ">					<xsl:text>, EST</xsl:text>				</xsl:when>				<xsl:when test="$tzon = '-0600' ">					<xsl:text>, CST</xsl:text>				</xsl:when>				<xsl:when test="$tzon = '-0700' ">					<xsl:text>, MST</xsl:text>				</xsl:when>				<xsl:when test="$tzon = '-0800' ">					<xsl:text>, PST</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text> </xsl:text>					<xsl:value-of select="$tzon"/>				</xsl:otherwise>			</xsl:choose>		</xsl:if>	</xsl:template>	<!-- Formatting date to mm/dd/yyyy format-->	<xsl:template name="dateFormatter">		<xsl:param name="date"/>		<xsl:if test="$date!=''">			<xsl:copy>				<xsl:value-of select="concat(substring($date, 5, 2),'/',substring($date, 7, 2),'/',substring($date, 1, 4))"/>			</xsl:copy>		</xsl:if>	</xsl:template>	<!-- convert to lower case -->	<xsl:template name="caseDown">		<xsl:param name="data"/>		<xsl:if test="$data">			<xsl:value-of select="translate($data, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>		</xsl:if>	</xsl:template>	<!-- convert to upper case -->	<xsl:template name="caseUp">		<xsl:param name="data"/>		<xsl:if test="$data">			<xsl:value-of select="translate($data,'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>		</xsl:if>	</xsl:template>	<!-- convert first character to upper case -->	<xsl:template name="firstCharCaseUp">		<xsl:param name="data"/>		<xsl:if test="$data">			<xsl:call-template name="caseUp">				<xsl:with-param name="data" select="substring($data,1,1)"/>			</xsl:call-template>			<xsl:value-of select="substring($data,2)"/>		</xsl:if>	</xsl:template>	<!-- show-noneFlavor -->	<xsl:template name="show-noneFlavor">		<xsl:param name="nf"/>		<xsl:choose>			<xsl:when test=" $nf = 'NI' ">				<xsl:text>no information</xsl:text>			</xsl:when>			<xsl:when test=" $nf = 'INV' ">				<xsl:text>invalid</xsl:text>			</xsl:when>			<xsl:when test=" $nf = 'MSK' ">				<xsl:text>masked</xsl:text>			</xsl:when>			<xsl:when test=" $nf = 'NA' ">				<xsl:text>not applicable</xsl:text>			</xsl:when>			<xsl:when test=" $nf = 'UNK' ">				<xsl:text>unknown</xsl:text>			</xsl:when>			<xsl:when test=" $nf = 'OTH' ">				<xsl:text>other</xsl:text>			</xsl:when>		</xsl:choose>	</xsl:template>	<xsl:template name="addCSS">		<style type="text/css">			<xsl:text>body {  color: #003366;  background-color: #FFFFFF;  font-family: Verdana, Tahoma, sans-serif;  font-size: 11px;}a {  color: #003366;  background-color: #FFFFFF;}h1 {  font-size: 12pt;  font-weight: bold;}h2 {  font-size: 11pt;  font-weight: bold;}h3 {  font-size: 10pt;  font-weight: bold;}h4 {  font-size: 8pt;  font-weight: bold;}table {  line-height: 10pt;  width: 100%;}th {  background-color: #ffd700;}td {  padding: 0.1cm 0.2cm;  vertical-align: top;  background-color: #ffffcc;}.h1center {  font-size: 12pt;  font-weight: bold;  text-align: center;  width: 80%;}.header_table{  border: 1pt inset #00008b;}.td_label{  font-weight: bold;  color: white;}.td_header_role_name{  width: 20%;  background-color: #3399ff;}.td_header_role_value{  width: 80%;  background-color: #ccccff;}.Bold{  font-weight: bold;}.Italics{  font-style: italic;}.Underline{  text-decoration:underline;}          </xsl:text>		</style>	</xsl:template>	<xsl:template name="addNBSCSS">		<STYLE type="text/css" title="PHDC"><xsl:text>	TABLE {	border-collapse: collapse;	border: 0px;}	body {    background-color: #FFFFFF;    color: #000000;    font-family: Arial, sans-serif;    font-size: 10pt;    font-weight: normal;     margin-top: 0px;}	label {    color: #000000;    font-family: Arial, sans-serif;    font-size: 10pt;    font-weight: bold;    vertical-align: top;}	td {  color: #000000;    font-family: Arial, sans-serif;    font-size: 10pt;    font-weight: normal;  padding-left:5px;}	th { color: #000000;    font-family: Arial, sans-serif;    font-size: 10pt;    font-weight: bold;    text-align: left;}          div.sect h2.sectHeader {border-width:0px 0px 1px 0px; border-color:#5F8DBF; border-style:solid;                padding:0.20em 0em 0.20em 0.25em; text-transform:capitalize; color:#5F8DBF; margin-top:1em;}       div.sect h2.sectHeader a.anchor {text-decoration:none; /*color:#5F8DBF;*/ color:#DF9F61}       div.sect h2.sectHeader span.displayToggleIcon {background:#FFF;}              div.sect table.sectHeader {width:100%; border-width:0px 0px 1px 0px; border-color:#5F8DBF;                margin-top:1em; border-style:solid; padding:0.20em 0.20em 0.20em 0.25em;}                       div.sect table.sectHeader1 {width:100%; border-width:0px 0px 0px 0px;                margin-top:1em; padding:0.20em 0.20em 0.20em 0.25em;}        div.sect table.sectHeader1 tr td.sectName {color:#151B8D; font-size: 110%; font-weight:bold; text-transform:capitalize;}        div.sect table.sectHeader1thead tr th.sectName {color:#151B8D; font-size: 110%; font-weight:bold; text-transform:capitalize;}                      div.sect table.sectHeader tr td.sectName {color:#DF9F61; font-size: 110%; font-weight:bold; text-transform:capitalize;}       div.sect table.sectHeader tr td.sectName a.anchor {text-decoration:none; /*color:#5F8DBF;*/ color:#DF9F61}       div.sect div.sectBody {text-align:center; margin-left:1em;}       table.sectionsToggler, table.subSectionsToggler, table.subSect {width:98%; border-width:0px; }       table.subSect thead tr {background:#FFF;}       table.subSect thead tr th {padding:0.15em; font-weight:bold; color:#185394; }       table.subSect tbody tr {/*background:#F2F2F2;*/ background:#EFF7FF;}       table.subSect tbody tr td { padding-top:5px; padding-bottom:5px;border-width:1px; }       table tbody tr td.label {text-align:right; font-weight:bold; }       table.subSect tbody tr td.fieldName {text-align:left; width:40%; vertical-align:top; padding-right:0.20em; font-weight:bold; border-width:1px; }              table.sectionsToggler, table.subSectionsToggler, table.subSect1 {width:98%; margin:0 auto; margin-top:1em; }       table.subSect1 thead tr th {padding:0.15em; font-weight:bold; color:#185394; }               table.subSect1 thead tr th.sectName  {padding:0.15em; color:#151B8D; font-size: 110%; font-weight:bold; text-transform:capitalize;}              table.subSect1 tbody tr td { border-style:solid; border-width: 1px; padding-top:5px; padding-bottom:5px;vertical-align:top; border-color: gray; width:30%}       table.subSect1 tbody tr td.fieldName {padding-left:5px; background:#EFF7FF; border-style:solid; border-width: 1px; text-align:left; width:25%; vertical-align:top; padding-right:0.20em; font-weight:bold; border-color: gray;}        table.subSect1 tbody tr td.fieldName1 {padding-left:5px; background:#EFF7FF; border-style:solid; border-width: 1px; text-align:left; width:30%; vertical-align:top; padding-right:0.20em; font-weight:bold; border-color: gray;}         table.subSect2 {width:98%; margin:0 auto; margin-top:1em; }        table.subSect2 thead tr th  {background:#DCDCDC; border:1px solid #BBB}              table.subSect2 tbody tr td { border-style:solid; border-width: 1px; padding-top:5px; padding-bottom:5px;vertical-align:top; border-color: gray; width:30%}       table.subSect2 tbody tr td.fieldName {padding-left:5px; background:#EFF7FF; border-style:solid; border-width: 1px; text-align:left; width:25%; vertical-align:top; padding-right:0.20em; font-weight:bold; border-color: gray;}        table.subSect2 tbody tr td.fieldName1 {padding-left:5px; background:#EFF7FF; border-style:solid; border-width: 1px; text-align:left; width:30%; vertical-align:top; padding-right:0.20em; font-weight:bold; border-color: gray;}        	table.dtTable, table.privateDtTable {width:98%; border:1px solid #BBB; padding-top:5px; padding-bottom:5px; margin:1em auto; margin-top:1em;}	table.dtTable thead tr th,table.privateDtTable thead tr th {text-decoration:none; border:1px solid #BBB; 	font-weight:bold; background:#EFF7FF; padding-top:5px; padding-bottom:5px; text-align:center;}	table.dtTable tbody tr td, table.privateDtTable tbody tr td {vertical-align:top; padding-top:5px; padding-bottom:5px;} 	table.dtTable thead tr th, table.privateDtTable thead tr th {text-decoration:none; border:1px solid #BBB; 	font-weight:bold; background:#EFF7FF; padding-top:5px; padding-bottom:5px; text-align:left;}	table.dtTable tbody tr.odd, table.privateDtTable tbody tr.odd, table.dtTable tbody tr.odd td table tr {background:#FFF;}	table.dtTable tbody tr.even, table.privateDtTable tbody tr.even, table.dtTable tbody tr.even td table tr {background:#EFF8FF;}	table.dtTable tbody tr td table tr td {border-width:0;}	table.dtTable tbody tr td, table.privateDtTable tbody tr td {padding-top:5px; padding-bottom:5px; border-width:0px 1px 1px 0px; border-style:solid; border-color:#DDD;}	table.dtTable tbody tr td.hoverDescLink a, table.privateDtTable tbody tr td.hoverDescLink a {text-decoration:none; color:#000; cursor:help;}	table.dtTable tbody tr td.hoverDescLink a:hover, table.privateDtTable tbody tr td.hoverDescLink a:hover {background:#FFE2BF;}	table.bluebardtTable thead tr th, table.privateDtTable thead tr th {text-decoration:none;padding-top:5px; padding-bottom:5px; solid #BBB;  font-weight:bold; background:#EFF7FF; padding-top:5px; padding-bottom:5px; text-align:center;}	table.bluebardtTable tbody tr td, table.privateDtTable tbody tr td {vertical-align:top; padding-top:5px; padding-bottom:5px;} 	table.bluebardtTable thead tr th, table.privateDtTable thead tr th {text-decoration:none; border:1px solid #BBB;  font-weight:bold; background:##EFF7FF; padding-top:5px; padding-bottom:5px; text-align:left;}	table.bluebardtTable tbody tr.odd, table.privateDtTable tbody tr.odd, table.dtTable tbody tr.odd td table tr {background:#FFF;}	table.bluebardtTable tbody tr.even, table.privateDtTable tbody tr.even, table.dtTable tbody tr.even td table tr {background:#EFF7FF;}	table.bluebardtTable tbody tr td table tr td {border-width:0;}	table.bluebardtTable tbody tr td, table.privateDtTable tbody tr td {padding-top:5px; padding-bottom:5px; border-width:0px 1px 1px 0px; border-style:solid; border-color:#C2D4EF;}	table.bluebardtTable tbody tr td.hoverDescLink a, table.privateDtTable tbody tr td.hoverDescLink a {text-decoration:none; color:#000; cursor:help;}	table.bluebardtTable tbody tr td.hoverDescLink a:hover, table.privateDtTable tbody tr td.hoverDescLink a:hover {background:#FFE2BF;}	table.bluebardtTable tbody tr td.dateField, table.dtTable tbody tr td.iconField {width:50px;}	table.bluebardtTable tbody tr td.nameField {width:150px;} 	table.bluebardtTable tbody tr td.iconField {text-align:center;}          </xsl:text></STYLE>		<xsl:text disable-output-escaping="yes"><![CDATA[ 	<script type =	"text/javascript"> 		function gotoSection(sectionId)			{				var sectionId = "#" + sectionId;			      window.location = sectionId;			}		</script> 	]]></xsl:text>	</xsl:template></xsl:stylesheet>