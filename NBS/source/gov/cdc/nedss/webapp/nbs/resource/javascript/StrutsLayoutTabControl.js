/**
   Attach a key board hot key to navigate between tabs within a tab container. 
   The tabs are generated by the struts layout tabs tag library. 
   The tab headings for each tab is identified by an unique Id 
   (eg., tabs0head0, tabs0head1, etc...)
   
   'hotkeys' JQuery plugin (referenced in resources.jsp) is used to achieve this.
*/
$j(document).bind('keydown', 'Ctrl+t', function(){navigateTab("next"); return false; });

/**
    Global variables used to identify container and tab handles
    that are defined in the Struts Layout Tab tag library.
*/
var disabledTabHandleClass = ".ongletTextDis";
var errorTabHandleClass    = ".ongletTextErr";
var enabledTabHandleClass  = ".ongletTextEna";

var tabHandleIdPrefix        = "tabs0head";
var tabContainerIdPrefix     = "tabs0tab";

var nextTab = "next";
var previousTab = "previous";
   
/**
* Navigate to next/previous tab inside the tab container.
* @param tabPosition next/previous to determine the relative position
    of the tab to be activated 
*/   
function navigateTab(tabPosition)
{
    // get the total # of tabs (both active and disabled)
    var tabsCount = 0;
    tabsCount = $j(disabledTabHandleClass).length + $j(errorTabHandleClass).length + $j(enabledTabHandleClass).length;
    
    // Get the Id attribute of the tab that is currently active. Active tab is 
    // identified by a the class '.ongletTextEna'
    var currentTabId = $j(enabledTabHandleClass).attr("id");
    
    // Get the index of the tab that is active. 
    var currentTabIndex = parseInt(currentTabId.replace(tabHandleIdPrefix,""));
    
    // initialize the next active tab's index to current active index. This value will
    // be changed in the course of the method.
    var nextActiveTabIndex = currentTabIndex; 
    
    // Id of the tab that will be activated at the end of this method. It is initialized to
    // currently active tab's id. It will changed during the course of the method.
    var nextActiveTabId = currentTabId;

    if (tabPosition == "next") 
    {
        nextActiveTabIndex = (currentTabIndex + 1);
        nextActiveTabId = tabHandleIdPrefix + nextActiveTabIndex;
        
        // Determine if a tab actually exists with the Id formed in the 
        // previous step. If no tab exists with the Id formed, reset the 
        // nextTabId to point to the first tab in the list
        if ($j("#" + nextActiveTabId).length <= 0) {
           nextActiveTabIndex = 0;
           nextActiveTabId = tabHandleIdPrefix + nextActiveTabIndex;
        }
    }
    else if (tabPosition == "previous")
    {
        if ((currentTabIndex - 1) < 0) {
            nextActiveTabIndex = (tabsCount -1);
            nextActiveTabId = tabHandleIdPrefix + nextActiveTabIndex;
        }
        else {
            nextActiveTabIndex = (currentTabIndex - 1);
            nextActiveTabId = tabHandleIdPrefix + nextActiveTabIndex;
        }                    
    }
    
    // Simulate the click event on the tab that should follow the current active tab
    $j("#" + nextActiveTabId).click();    
    
    // focus on the first elt in the tab.
    shiftFocusToFirstTabElement();
}

/**
* Automatically shift the cursor focus to the first input element in the 
* tab that is currently active.
*/
function shiftFocusToFirstTabElement()
{
    var activeTabId = $j(enabledTabHandleClass).attr("id");
    if(activeTabId == undefined) //added if there are no tabs on the page. 
    	return false;
    var activeTabIndex = parseInt(activeTabId.replace(tabHandleIdPrefix,""));
    var activeTabContainerId = tabContainerIdPrefix + activeTabIndex;
    
    // focus on the first valid element
    $j("#" + activeTabContainerId).find(':input:visible:enabled:first').focus();
    javascript: scroll(0, 0);
}