%msglib; 
PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
%macro dbload (DBtable, DSname);
 Proc Append Force base=NBS_MSG.&DBtable data=&DSname;
 Run;
 Quit; 
%mend dbload;

%MACRO TEMPLATE(TEMPLATE);
 PROC SQL;
	UPDATE &TEMPLATE SET MAX_MSG_TEMPLATE_UID = (SELECT MAX(MSG_TEMPLATE_UID) FROM NBS_MSG.MSG_TEMPLATE);
	UPDATE &TEMPLATE SET MAX_MSG_TEMPLATE_UID_IN_HIST = (SELECT MAX(MSG_TEMPLATE_UID) FROM NBS_MSG.MSG_TEMPLATE_HIST);
	
QUIT;
DATA &TEMPLATE;
SET &TEMPLATE;
if MAX_MSG_TEMPLATE_UID ~=. then MSG_TEMPLATE_UID= MSG_TEMPLATE_UID+MAX_MSG_TEMPLATE_UID-1;
else if MAX_MSG_TEMPLATE_UID_IN_HIST  ~=. then MSG_TEMPLATE_UID= MSG_TEMPLATE_UID+MAX_MSG_TEMPLATE_UID_IN_HIST-1;
DROP MAX_MSG_TEMPLATE_UID MAX_MSG_TEMPLATE_UID_IN_HIST;
RUN;
%MEND;

%MACRO AUTHDATA(IN_SOURCE, OUT_SOURCE);
PROC SQL;
CREATE TABLE  &OUT_SOURCE AS SELECT A.*, 
B.FIRST_NM AS CHG_USER_FIRST_NAME 'CHG_USER_FIRST_NAME', B.LAST_NM AS CHG_USER_LAST_NAME 'CHG_USER_LAST_NAME' 
FROM
&IN_SOURCE A 
LEFT OUTER JOIN NBS_ODS.USER_PROFILE B
ON A.LAST_CHG_USER_ID=B.NEDSS_ENTRY_ID;
QUIT; 
DATA &OUT_SOURCE;
SET &OUT_SOURCE;
LENGTH AUTHOR $50;
AUTHOR= TRIM(CHG_USER_LAST_NAME)|| ', ' ||TRIM(CHG_USER_FIRST_NAME);
IF LENGTH(COMPRESS(CHG_USER_FIRST_NAME))> 0 AND LENGTHN(COMPRESS(CHG_USER_LAST_NAME))>0 THEN AUTHOR= TRIM(CHG_USER_LAST_NAME)|| ', ' ||TRIM(CHG_USER_FIRST_NAME);
ELSE IF LENGTHN(COMPRESS(CHG_USER_FIRST_NAME))> 0 THEN AUTHOR= TRIM(CHG_USER_FIRST_NAME);
ELSE IF LENGTHN(COMPRESS(CHG_USER_LAST_NAME))> 0 THEN AUTHOR= TRIM(CHG_USER_LAST_NAME);
DROP CHG_USER_FIRST_NAME CHG_USER_LAST_NAME LAST_CHG_USER_ID;
RUN;
%MEND AUTHDATA;

%MACRO ASSIGNANDCREATE(DBTABLE, METADATA, SEQNBR);
DATA &DBTABLE;
SET &DBTABLE;
LENGTH MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST 8;
RENAME _NAME_ = QUESTION_IDENTIFIER;
IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
RUN;
%ASSIGN_UID (&DBTABLE, MSG_ANSWER_UID);
PROC SQL;
	UPDATE &DBTABLE SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
	UPDATE &DBTABLE SET MAX_MSG_ANSWER_UID_IN_HIST = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER_HIST);

QUIT;
DATA &DBTABLE;
SET &DBTABLE;
IF SEQNBR = 0 THEN SEQ_NBR=0;

IF MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
ELSE IF MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MAX_MSG_ANSWER_UID_IN_HIST-1;
DROP MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST _LABEL_;

RUN;


PROC SQL;
CREATE TABLE ANSWER AS SELECT DISTINCT
A.*,
COL1 AS ANSWER_TXT 'ANSWER_TXT',
ANSWER_CODE_SYSTEM_CD,
ANSWER_CODE_SYSTEM_DESC_TXT,
ANSWER_DISPLAY_NM FROM &DBTABLE A LEFT OUTER JOIN &METADATA B ON
A.QUESTION_IDENTIFIER=B.QUESTION_IDENTIFIER;
QUIT;

/*
DATA ANSWER;
SET ANSWER;
IF LENGTHN(CODED_QUESTION) THEN ANSWER_TXT =COMPRESS(COL1 || '^' || CODED_QUESTION);
ANSWER_CODE_SYSTEM_CD =NBS_QUESTION.QUESTION_OID, 
ANSWER_CODE_SYSTEM_DESC_TXT=NBS_QUESTION.QUESTION_OID_SYSTEM_TXT,
ANSWER_DISPLAY_NM=NBS_QUESTION.QUESTION_LABEL,
ELSE ANSWER_TXT =COMPRESS(COL1);
RUN;
*/

%DBLOAD (MSG_ANSWER,ANSWER);
%MEND ASSIGNANDCREATE;

%MACRO CHECKER(DBTABLE,METADATA,SEQNBR );
PROC SQL;
CREATE TABLE checker 
(COUNTER NUM);
INSERT INTO checker( COUNTER) VALUES 
(NULL);
UPDATE checker SET COUNTER= (select  count(*) from &DBTABLE );
QUIT;
DATA _null_;
  set checker;
  if COUNTER>0 then call execute('%ASSIGNANDCREATE('||'&DBTABLE'||','||'&METADATA'||','||'SEQNBR)');
RUN;
%MEND;

/*

%MACRO ASSIGN_UID_DATA(DATASOURCE, NUMBER);
DATA &DATASOURCE;
SET &DATASOURCE;
LENGTH MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST 8;
RENAME _NAME_ = QUESTION_IDENTIFIER COL1 = ANSWER_TXT;
IF  NUMBER=0 THEN SEQ_NBR=0;

IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
RUN;
PROC SQL;
	UPDATE &DATASOURCE SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;
 %ASSIGN_UID (&DATASOURCE, MSG_ANSWER_UID);
DATA &DATASOURCE;
SET &DATASOURCE;
if MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID;
RUN;
%DBLOAD (MSG_ANSWER,&DATASOURCE);
%MEND;

*/
/*PROC SQL;
CREATE TABLE CONFIG AS SELECT * FROM NBS_MSG.Msg_Container;
QUIT;
PROC SQL;
CREATE TABLE CONFIG AS SELECT MSG_SENDING_APPLICATION_OID+'_'+MSG_SENDING_FACILITY_OID as CD, 
MSG_SENDING_APPLICATION_OID as AUTHOR_ID,


CREATE TABLE MSG_CONTAINER AS SELECT
MSG_SENDING_APPLICATION_OID+'_'+MSG_SENDING_FACILITY_OID as CD, 
MSG_SENDING_APPLICATION_OID as AUTHOR_ID,
NOTIFICATION.LAST_CHG_TIME AS EFFECTIVE_TIME,
'55751-2' as CD,
PHC1464 as ADD_REASON_CD 'ADD_REASON_CD',
MSG_SENDING_FACILITY_OID as CUSTODIAN_ID 'CUSTODIAN_ID',
Notification.Local_id as MSG_LOCAL_ID 'MSG_LOCAL_ID',
Notification.RECORD_STATUS_CD,
Notification.RECORD_status_time,
Notification.VERSION_CTRL_NBR,
MSG_SENDING_APPLICATION_OID+'_'+MSG_SENDING_FACILITY_OID +'_'+notificatio_last_chg_time  DOCUMENT_ID,
VERSION_CTRL_NBR 
from nbs_ods.notification full join nbs_ods.nbs_configuration;
QUIT;
PROC SQL;
CREATE TABLE NOTIFICATION_SUB_ACT_MAP AS
SELECT 
	TARGET_ACT_UID AS ACT_UID, NOTIFICATION_UID, ACT_RELATIONSHIP.TYPE_CD, NOTIFICATION_LOCAL_ID, NOTIF_VERSION_CTRL_NBR
	FROM NBS_ODS.ACT_RELATIONSHIP 
	INNER JOIN NOTIFICATION_CASE_MAP 
		ON ACT_RELATIONSHIP.SOURCE_ACT_UID=NOTIFICATION_CASE_MAP.ACT_UID;
QUIT;

PROC SQL;
CREATE TABLE NOTIFICATION_ACT_MAP AS
	SELECT * FROM NOTIFICATION_CASE_MAP
	UNION
	SELECT * FROM NOTIFICATION_SUB_ACT_MAP;
QUIT;*/
%MACRO ASSIGN_UID (DS, UID);
 DATA &DS;
  retain &UID 1;
/*  IF &UID=1 THEN OUTPUT;*/
  SET &DS;
	&UID+1;
	OUTPUT;
 RUN;
%MEND ASSIGN_UID;
/*
PROC SQL;
CREATE TABLE CONFIG AS SELECT 
MSG_SENDING_APPLICATION_OID ,
MSG_SENDING_FACILITY_OID , 
MSG_SENDING_APPLICATION_OID as AUTHOR_ID
FROM NBS_ODS.nbs_configuration;
QUIT;

PROC SQL;

CREATE TABLE MSG_CONTAINER_1 like nbs_msg.MSG_CONTAINER;
QUIT;*/
PROC SQL;
CREATE TABLE MSG_CONTAINER as select 
Notification.Notification_uid,
Notification.Local_id as MSG_LOCAL_ID 'MSG_LOCAL_ID',
Notification.RECORD_STATUS_CD as RECORD_STATUS_CD 'RECORD_STATUS_CD',
Notification.RECORD_STATUS_TIME as RECORD_STATUS_TIME 'RECORD_STATUS_TIME',
Notification.VERSION_CTRL_NBR as VERSION_CTRL_NBR 'VERSION_CTRL_NBR',
/**TODO CHANGE TO phc VERSION CONTROL NUMBER*/
Notification.last_chg_time
FROM NBS_ODS.NOTIFICATION
WHERE NOTIFICATION.CD IN ('EXP_NOTF_PHDC', 'SHARE_NOTF_PHDC') 
AND NOTIFICATION.RECORD_STATUS_CD <> 'COMPLETED';

QUIT;

DATA MSG_CONTAINER;
SET MSG_CONTAINER;
LENGTH   NBS_INTERFACE_UID MAX_MSG_CONTAINER_UID MAX_MSG_CONTAINER_UID_IN_HIST 8;
LENGTH ADD_REASON_CD AUTHOR_ID CD CUSTODIAN_ID DOCUMENT_ID $250;
	ADD_REASON_CD = 'PHC1463';
	/*todo ADD SHARE /TEANSFER*/
	EFFECTIVE_TIME=LAST_CHG_TIME;
	EFFECTIVE_DATETIME=PUT((LAST_CHG_TIME),DATETIME22.3);
	CD ='55751-2';
RUN;
PROC SQL;
	UPDATE MSG_CONTAINER SET MAX_MSG_CONTAINER_UID = (SELECT MAX(MSG_CONTAINER_UID) FROM NBS_MSG.MSG_CONTAINER);
	UPDATE MSG_CONTAINER SET MAX_MSG_CONTAINER_UID_IN_HIST = (SELECT MAX(MSG_CONTAINER_UID) FROM NBS_MSG.MSG_CONTAINER_HIST);
	UPDATE MSG_CONTAINER SET AUTHOR_ID  = (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_APPLICATION_OID');
	UPDATE MSG_CONTAINER SET CUSTODIAN_ID  = (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_FACILITY_OID');
	UPDATE MSG_CONTAINER SET DOCUMENT_ID  = COMPRESS((SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_APPLICATION_OID')
										|| (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_FACILITY_OID')
										|| EFFECTIVE_DATETIME);
QUIT;
 %ASSIGN_UID (MSG_CONTAINER, MSG_CONTAINER_UID);

DATA MSG_CONTAINER;
SET MSG_CONTAINER;
if  MAX_MSG_CONTAINER_UID~=. then MSG_CONTAINER_UID= MSG_CONTAINER_UID+MAX_MSG_CONTAINER_UID-1;
else if MAX_MSG_CONTAINER_UID_IN_HIST  ~=. then MSG_CONTAINER_UID= MSG_CONTAINER_UID+MAX_MSG_CONTAINER_UID_IN_HIST-1;
else MSG_CONTAINER_UID =MSG_CONTAINER_UID-1;
DROP MAX_MSG_CONTAINER_UID EFFECTIVE_DATETIME;
RUN;
PROC SQL;
DELETE FROM MSG_CONTAINER WHERE EFFECTIVE_TIME IS NULL;
RUN;
%DBLOAD (MSG_CONTAINER, MSG_CONTAINER);


/*
PROC SQL;
CREATE TABLE MSG_TEMPLATE as select 
MSG_CONTAINER.MSG_CONTAINER_UID
MSG_CONTAINER.NOTIFICATION_UID 
FROM 
MSG_CONTAINER INNER JOIN NBS_ODS.ACT_RELATIONSHIP 
		ON SOURCE_ACT_UID=NOTIFICATION_UID
*/

PROC SQL;
CREATE TABLE NOTIFICATION_CASE_MAP AS
SELECT 
	MSG_CONTAINER.MSG_CONTAINER_UID,
	TARGET_ACT_UID AS ACT_UID, ACT_RELATIONSHIP.TYPE_CD
		FROM MSG_CONTAINER 
	INNER JOIN NBS_ODS.ACT_RELATIONSHIP 
		ON SOURCE_ACT_UID=NOTIFICATION_UID;
QUIT;

PROC SQL;
	CREATE TABLE NOTIFICATION_SUB_ACT_MAP AS
	SELECT NOTIFICATION_CASE_MAP.MSG_CONTAINER_UID,
	SOURCE_ACT_UID AS ACT_UID, ACT_RELATIONSHIP.TYPE_CD
	FROM NBS_ODS.ACT_RELATIONSHIP 
	INNER JOIN NOTIFICATION_CASE_MAP 
	ON ACT_RELATIONSHIP.TARGET_ACT_UID=NOTIFICATION_CASE_MAP.ACT_UID
WHERE ACT_RELATIONSHIP.TYPE_CD IN ('1180', 'IXS', 'TreatmentToPHC');
QUIT;
PROC SQL;
	CREATE TABLE PHC_TEMPLATE
	AS SELECT  MSG_CONTAINER_UID,PUBLIC_HEALTH_CASE_UID,PUBLIC_HEALTH_CASE.CD,
	CLASS_CD, MOOD_CD, CONFIDENTIALITY_CD, LAST_CHG_TIME, LOCAL_ID, PRIORITY_CD, ADD_TIME,
	STATUS_CD, RECORD_STATUS_TIME AS STATUS_TIME 'STATUS_TIME' FROM NOTIFICATION_CASE_MAP
	INNER JOIN NBS_ODS.PUBLIC_HEALTH_CASE 
	ON PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID = NOTIFICATION_CASE_MAP.ACT_UID
	INNER JOIN NBS_ODS.ACT 
	ON ACT.ACT_UID = PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID;
QUIT;
DATA PHC_TEMPLATE;
SET PHC_TEMPLATE;
LENGTH    MAX_MSG_TEMPLATE_UID MAX_MSG_TEMPLATE_UID_IN_HIST 8;
TYPE_CD =  'ACT';
SEQ_NBR=0;
RUN;

 %ASSIGN_UID (PHC_TEMPLATE, MSG_TEMPLATE_UID);
%TEMPLATE(PHC_TEMPLATE);


PROC SQL;
DELETE FROM PHC_TEMPLATE WHERE PUBLIC_HEALTH_CASE_UID IS NULL;
RUN;
%DBLOAD (MSG_TEMPLATE,PHC_TEMPLATE );
/*
PROC SQL;
CREATE TABLE NOTIFICATION_ACT_MAP AS
	SELECT * FROM NOTIFICATION_CASE_MAP
	UNION
	SELECT * FROM NOTIFICATION_SUB_ACT_MAP;
QUIT;




PROC SQL;
CREATE TABLE ACT_BASE AS
SELECT NOTIFICATION_ACT_MAP.ACT_UID, NOTIFICATION_LOCAL_ID, VERSION_CTRL_NBR, PARTICIPATION.TYPE_CD, PERSON.LOCAL_ID AS PATIENT_LOCAL_ID 'PATIENT_LOCAL_ID',
SUBJECT_ENTITY_UID 
FROM NBS_ODS.PARTICIPATION 
INNER JOIN NOTIFICATION_ACT_MAP 
ON NOTIFICATION_ACT_MAP.ACT_UID =PARTICIPATION.ACT_UID
INNER JOIN NBS_ODS.PERSON 
ON PERSON.PERSON_UID=PARTICIPATION.SUBJECT_ENTITY_UID WHERE  PERSON.CD= 'PAT';
QUIT;
DATA ACT_BASE;
SET ACT_BASE;
length PARENT_ID $100;
	PARENT_ID=STRIP(PATIENT_LOCAL_ID) || '-' ||  STRIP(NOTIFICATION_LOCAL_ID) || '-' || STRIP(NOTIF_VERSION_CTRL_NBR);

RUN;
PROC SQL;
CREATE TABLE ACT_PERSON_BASE AS
SELECT ACT_BASE.*, PERSON.LOCAL_ID
FROM NBS_ODS.PERSON INNER JOIN ACT_BASE 
ON PERSON.PERSON_UID =ACT_BASE.SUBJECT_ENTITY_UID;
QUIT;
PROC SQL;
CREATE TABLE ACT_ORGANIZATION_BASE AS
SELECT ACT_BASE.*, ORGANIZATION.LOCAL_ID
FROM NBS_ODS.ORGANIZATION INNER JOIN ACT_BASE 
ON ORGANIZATION.ORGANIZATION_UID =ACT_BASE.SUBJECT_ENTITY_UID;
QUIT;

*/
PROC SQL;
CREATE TABLE METADATA AS
	SELECT DISTINCT NBS_QUESTION.DATA_TYPE, NBS_QUESTION.DATA_LOCATION , 
	NBS_QUESTION.QUESTION_OID AS ANSWER_CODE_SYSTEM_CD 'ANSWER_CODE_SYSTEM_CD', 
	NBS_QUESTION.QUESTION_OID_SYSTEM_TXT AS ANSWER_CODE_SYSTEM_DESC_TXT 'ANSWER_CODE_SYSTEM_DESC_TXT',
	NBS_QUESTION.QUESTION_LABEL AS ANSWER_DISPLAY_NM 'ANSWER_DISPLAY_NM',
	NBS_QUESTION.QUESTION_IDENTIFIER FROM NBS_ODS.NBS_QUESTION 
WHERE NBS_QUESTION.DATA_TYPE IN ('CODED', 'Coded');
QUIT;

PROC SQL;
CREATE TABLE SOURCE_CASE_ANSWER AS SELECT
PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID, 
PUBLIC_HEALTH_CASE.CASE_CLASS_CD	AS	INV163 'INV163',
PUBLIC_HEALTH_CASE.CD	AS	INV169 'INV169',
PUBLIC_HEALTH_CASE.CONTACT_INV_STATUS_CD	AS	NBS058 'NBS058',
PUBLIC_HEALTH_CASE.CURR_PROCESS_STATE_CD	AS	NBS115 'NBS115',
PUBLIC_HEALTH_CASE.DAY_CARE_IND_CD	AS	INV148 'INV148',
PUBLIC_HEALTH_CASE.DETECTION_METHOD_CD	AS	INV159 'INV159',
PUBLIC_HEALTH_CASE.DISEASE_IMPORTED_CD	AS	INV152 'INV152',
PUBLIC_HEALTH_CASE.EFFECTIVE_DURATION_UNIT_CD	AS	INV140 'INV140',
PUBLIC_HEALTH_CASE.FOOD_HANDLER_IND_CD	AS	INV149 'INV149',
PUBLIC_HEALTH_CASE.HOSPITALIZED_IND_CD	AS	INV128 'INV128',
PUBLIC_HEALTH_CASE.IMPORTED_COUNTRY_CD	AS	INV153 'INV153',
PUBLIC_HEALTH_CASE.IMPORTED_COUNTY_CD	AS	INV156 'INV156',
PUBLIC_HEALTH_CASE.IMPORTED_STATE_CD	AS	INV154 'INV154',
PUBLIC_HEALTH_CASE.INVESTIGATION_STATUS_CD	AS	INV109 'INV109',
PUBLIC_HEALTH_CASE.JURISDICTION_CD	AS	INV107 'INV107',
PUBLIC_HEALTH_CASE.OUTBREAK_IND	AS	INV150 'INV150',
PUBLIC_HEALTH_CASE.OUTBREAK_NAME	AS	INV151 'INV151',
PUBLIC_HEALTH_CASE.OUTCOME_CD	AS	INV145 'INV145',
PUBLIC_HEALTH_CASE.PAT_AGE_AT_ONSET_UNIT_CD	AS	INV144 'INV144',
PUBLIC_HEALTH_CASE.PREGNANT_IND_CD	AS	INV178 'INV178',
PUBLIC_HEALTH_CASE.PRIORITY_CD	AS	NBS055 'NBS055',
PUBLIC_HEALTH_CASE.PROG_AREA_CD	AS	INV108 'INV108',
PUBLIC_HEALTH_CASE.REFERRAL_BASIS_CD	AS	NBS110 'NBS110',
PUBLIC_HEALTH_CASE.RPT_SOURCE_CD	AS	INV112 'INV112',
PUBLIC_HEALTH_CASE.SHARED_IND	AS	INV174 'INV174',
PUBLIC_HEALTH_CASE.SHARED_IND	AS	NBS012 'NBS012',
PUBLIC_HEALTH_CASE.TRANSMISSION_MODE_CD	AS	INV157 'INV157',
PUBLIC_HEALTH_CASE.ACTIVITY_FROM_TIME,
PUBLIC_HEALTH_CASE.ACTIVITY_TO_TIME,
PUBLIC_HEALTH_CASE.DECEASED_TIME,
PUBLIC_HEALTH_CASE.DIAGNOSIS_TIME,
PUBLIC_HEALTH_CASE.EFFECTIVE_FROM_TIME,
PUBLIC_HEALTH_CASE.EFFECTIVE_TO_TIME,
PUBLIC_HEALTH_CASE.HOSPITALIZED_ADMIN_TIME,
PUBLIC_HEALTH_CASE.HOSPITALIZED_DISCHARGE_TIME,
PUBLIC_HEALTH_CASE.INFECTIOUS_FROM_DATE,
PUBLIC_HEALTH_CASE.INFECTIOUS_TO_DATE,
PUBLIC_HEALTH_CASE.INVESTIGATOR_ASSIGNED_TIME,
PUBLIC_HEALTH_CASE.RPT_FORM_CMPLT_TIME,
PUBLIC_HEALTH_CASE.RPT_TO_COUNTY_TIME,
PUBLIC_HEALTH_CASE.RPT_TO_STATE_TIME,
PUBLIC_HEALTH_CASE.INFECTIOUS_FROM_DATE,
PUBLIC_HEALTH_CASE.INFECTIOUS_TO_DATE,
PUBLIC_HEALTH_CASE.EFFECTIVE_DURATION_AMT,
PUBLIC_HEALTH_CASE.HOSPITALIZED_DURATION_AMT,
PUBLIC_HEALTH_CASE.PAT_AGE_AT_ONSET,
PUBLIC_HEALTH_CASE.CONTACT_INV_TXT	AS	NBS059 'NBS059',
PUBLIC_HEALTH_CASE.IMPORTED_CITY_DESC_TXT	AS	INV155 'INV155' , 
PUBLIC_HEALTH_CASE.LOCAL_ID	AS	INV168 'INV168' ,
PUBLIC_HEALTH_CASE.MMWR_WEEK	AS	INV165 'INV165' ,
PUBLIC_HEALTH_CASE.MMWR_YEAR	AS	INV166 'INV166',
PUBLIC_HEALTH_CASE.TXT	AS	INV167 'INV167',
STATE.ROOT_EXTENSION_TXT  LENGTH = 100 format=$100. AS INV173,
LEGACY.ROOT_EXTENSION_TXT LENGTH = 100 format=$100. AS INV200,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM  NBS_ODS.PUBLIC_HEALTH_CASE
INNER JOIN PHC_TEMPLATE 
ON PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID=PHC_TEMPLATE.PUBLIC_HEALTH_CASE_UID
LEFT OUTER JOIN NBS_ODS.ACT_ID STATE
ON PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID = STATE.ACT_UID
AND STATE.TYPE_CD='STATE'
LEFT OUTER JOIN NBS_ODS.ACT_ID LEGACY
ON PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID = LEGACY.ACT_UID
AND LEGACY.TYPE_CD='LEGACY'
ORDER BY MSG_CONTAINER_UID,MSG_TEMPLATE_UID;
QUIT;
DATA SOURCE_CASE_ANSWER;
SET SOURCE_CASE_ANSWER;
	INV147= PUT(DATEPART(ACTIVITY_FROM_TIME),YYMMDDD10.);
	INV2006= PUT(DATEPART(ACTIVITY_TO_TIME),YYMMDDD10.);
	INV146= PUT(DATEPART(DECEASED_TIME),YYMMDDD10.);
	INV136= PUT(DATEPART(DIAGNOSIS_TIME),YYMMDDD10.);
	INV137= PUT(DATEPART(EFFECTIVE_FROM_TIME),YYMMDDD10.);
	INV138= PUT(DATEPART(EFFECTIVE_TO_TIME),YYMMDDD10.);
	INV132= PUT(DATEPART(HOSPITALIZED_ADMIN_TIME),YYMMDDD10.);
	INV133= PUT(DATEPART(HOSPITALIZED_DISCHARGE_TIME),YYMMDDD10.);
	NBS056= PUT(DATEPART(INFECTIOUS_FROM_DATE),YYMMDDD10.);
	NBS057= PUT(DATEPART(INFECTIOUS_TO_DATE),YYMMDDD10.);
	INV110= PUT(DATEPART(INVESTIGATOR_ASSIGNED_TIME),YYMMDDD10.);
	INV111= PUT(DATEPART(RPT_FORM_CMPLT_TIME),YYMMDDD10.);
	INV120= PUT(DATEPART(RPT_TO_COUNTY_TIME),YYMMDDD10.);
	INV121= PUT(DATEPART(RPT_TO_STATE_TIME),YYMMDDD10.);
	INV258= PUT(DATEPART(INFECTIOUS_FROM_DATE),YYMMDDD10.);
	INV259= PUT(DATEPART(INFECTIOUS_TO_DATE),YYMMDDD10.);


	INV139=PUT(EFFECTIVE_DURATION_AMT ,10.);
	INV134=PUT(HOSPITALIZED_DURATION_AMT ,10.);
	INV143=PUT(PAT_AGE_AT_ONSET ,10.);
	SEQ_NBR=0;
RUN;

PROC TRANSPOSE DATA=SOURCE_CASE_ANSWER OUT=SOURCE_CASE_ANSWER_OUT;
var INV107 INV108 INV109 INV110 INV111 INV112 INV120 INV121 INV128 INV132 INV133 INV134 INV136 INV137 INV138 INV139
INV140 INV143 INV144 INV145 INV146 INV147 INV148 INV149 INV150 INV151 INV152 INV153 INV154 INV155 INV156 INV157
INV159 INV163 INV165 INV166 INV167 INV168 INV169 INV173 INV178 INV200 INV2006 INV258 INV259 NBS012 NBS055 NBS056
NBS057 NBS058 NBS059 NBS110 NBS115;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID;
RUN;
/*
proc sql;
CREATE TABLE METADATA AS

select distinct NBS_question.data_type, NBS_question.data_location , 
compress(NBS_question.question_oid ||'^'||NBS_question.question_oid_system_txt||'^'|| NBS_question.question_label) AS CODED_QUESTION, 
NBS_question.question_identifier from nbs_ods.NBS_question 
where NBS_question.data_type in ('CODED', 'Coded')
AND DATA_LOCATION LIKE ('PUBLIC_HEALTH_CASE.%') 
OR DATA_LOCATION LIKE ('Public_Health_Case.%') 
OR data_location LIKE ( 'ACT_ID%');
quit;
*/
%ASSIGNANDCREATE(SOURCE_CASE_ANSWER_OUT, METADATA, 0);
/*
DATA SOURCE_CASE_ANSWER_OUT;
SET SOURCE_CASE_ANSWER_OUT;
LENGTH MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST 8;
RENAME _NAME_ = QUESTION_IDENTIFIER COL1 = ANSWER_TXT;
IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
DROP PUBLIC_HEALTH_CASE_UID;
RUN;
PROC SQL;
	UPDATE SOURCE_CASE_ANSWER_OUT SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
	UPDATE SOURCE_CASE_ANSWER_OUT SET MAX_MSG_ANSWER_UID_IN_HIST = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER_HIST);
QUIT;
 %ASSIGN_UID (SOURCE_CASE_ANSWER_OUT, MSG_ANSWER_UID);
DATA SOURCE_CASE_ANSWER_OUT;
SET SOURCE_CASE_ANSWER_OUT;
SEQ_NBR=0;
IF MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
ELSE IF MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MAX_MSG_ANSWER_UID_IN_HIST-1;
DROP MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST;
RUN;

%DBLOAD (MSG_ANSWER,SOURCE_CASE_ANSWER_OUT);
*/

PROC SQL;
CREATE TABLE SOURCE_CASE_MANAGE_ANSWER AS SELECT 
ACT_REF_TYPE_CD AS NBS177 'NBS177',
FIELD_FOLL_UP_OOJ_OUTCOME AS NBS182 'NBS182',
FLD_FOLL_UP_DISPO AS NBS173 'NBS173',
FLD_FOLL_UP_EXPECTED_IN AS NBS168 'NBS168',
FLD_FOLL_UP_INTERNET_OUTCOME AS NBS178 'NBS178',
FLD_FOLL_UP_NOTIFICATION_PLAN AS NBS167 'NBS167',
FLD_FOLL_UP_PROV_DIAGNOSIS AS NBS166 'NBS166',
FLD_FOLL_UP_PROV_EXM_REASON AS NBS165 'NBS165',
INIT_FOLL_UP AS NBS140 'NBS140',
INIT_FOLL_UP_NOTIFIABLE AS NBS143 'NBS143',
INITIATING_AGNCY AS NBS111 'NBS111',
INTERNET_FOLL_UP AS NBS142 'NBS142',
OOJ_AGENCY AS NBS179 'NBS179',
PAT_INTV_STATUS_CD AS NBS192 'NBS192',
STATUS_900 AS NBS153 'NBS153',
SURV_PATIENT_FOLL_UP AS NBS151 'NBS151',
SURV_PROV_DIAGNOSIS AS NBS150 'NBS150',
SURV_PROV_EXM_REASON AS NBS149 'NBS149',
SURV_PROVIDER_CONTACT AS NBS148 'NBS148',
CASE_CLOSED_DATE,   
FLD_FOLL_UP_DISPO_DATE,   
FLD_FOLL_UP_EXAM_DATE,   
FLD_FOLL_UP_EXPECTED_DATE,   
FOLL_UP_ASSIGNED_DATE,   
INIT_FOLL_UP_ASSIGNED_DATE,   
INIT_FOLL_UP_CLOSED_DATE,   
INIT_INTERVIEW_ASSIGNED_DATE,   
INTERVIEW_ASSIGNED_DATE,   
OOJ_DUE_DATE,   
OOJ_INITG_AGNCY_OUTC_DUE_DATE,   
OOJ_INITG_AGNCY_OUTC_SNT_DATE,   
OOJ_INITG_AGNCY_RECD_DATE,   
SURV_ASSIGNED_DATE,   
SURV_CLOSED_DATE,   
EPI_LINK_ID AS NBS191 'NBS191',
FIELD_RECORD_NUMBER AS NBS160 'NBS160',
INIT_FOLL_UP_CLINIC_CODE AS NBS144 'NBS144',
OOJ_NUMBER AS NBS180 'NBS180',
SUBJ_COMPLEXION AS NBS158 'NBS158',
SUBJ_HAIR AS NBS157 'NBS157',
SUBJ_HEIGHT AS NBS155 'NBS155',
SUBJ_OTH_IDNTFYNG_INFO AS NBS159 'NBS159',
SUBJ_SIZE_BUILD AS NBS156 'NBS156',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.CASE_MANAGEMENT
INNER JOIN 
	PHC_TEMPLATE 
ON
	CASE_MANAGEMENT.PUBLIC_HEALTH_CASE_UID=PHC_TEMPLATE.PUBLIC_HEALTH_CASE_UID
ORDER BY
	MSG_CONTAINER_UID, MSG_TEMPLATE_UID;
QUIT;

DATA SOURCE_CASE_MANAGE_ANSWER;
SET SOURCE_CASE_MANAGE_ANSWER;
NBS196=PUT(DATEPART(CASE_CLOSED_DATE),YYMMDDD10.);		
NBS174=PUT(DATEPART(FLD_FOLL_UP_DISPO_DATE),YYMMDDD10.);		
NBS170=PUT(DATEPART(FLD_FOLL_UP_EXAM_DATE),YYMMDDD10.);		
NBS169=PUT(DATEPART(FLD_FOLL_UP_EXPECTED_DATE),YYMMDDD10.);		
NBS162=PUT(DATEPART(FOLL_UP_ASSIGNED_DATE),YYMMDDD10.);		
NBS164=PUT(DATEPART(INIT_FOLL_UP_ASSIGNED_DATE),YYMMDDD10.);		
NBS141=PUT(DATEPART(INIT_FOLL_UP_CLOSED_DATE),YYMMDDD10.);		
NBS189=PUT(DATEPART(INIT_INTERVIEW_ASSIGNED_DATE),YYMMDDD10.);		
NBS187=PUT(DATEPART(INTERVIEW_ASSIGNED_DATE),YYMMDDD10.);		
NBS181=PUT(DATEPART(OOJ_DUE_DATE),YYMMDDD10.);		
NBS113=PUT(DATEPART(OOJ_INITG_AGNCY_OUTC_DUE_DATE),YYMMDDD10.);		
NBS114=PUT(DATEPART(OOJ_INITG_AGNCY_OUTC_SNT_DATE),YYMMDDD10.);		
NBS112=PUT(DATEPART(OOJ_INITG_AGNCY_RECD_DATE),YYMMDDD10.);		
NBS146=PUT(DATEPART(SURV_ASSIGNED_DATE),YYMMDDD10.);		
NBS147=PUT(DATEPART(SURV_CLOSED_DATE),YYMMDDD10.);		
RUN;



PROC TRANSPOSE DATA=SOURCE_CASE_MANAGE_ANSWER OUT=SOURCE_CASE_MANAGE_ANSWER_OUT;
VAR NBS177 NBS182 NBS173 NBS168 NBS178 NBS167 NBS166 NBS165 NBS140 NBS143 NBS111 NBS142 NBS179 NBS192 NBS153 NBS151 
NBS150 NBS149 NBS148 NBS196 NBS174 NBS170 NBS169 NBS162 NBS164 NBS141 NBS189 NBS187 NBS181 NBS113 NBS114 NBS112 
NBS146 NBS147 NBS191 NBS160 NBS144 NBS180 NBS158 NBS157 NBS155 NBS159 NBS156;	
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID;
RUN;
%CHECKER(SOURCE_CASE_MANAGE_ANSWER_OUT, METADATA, 0);

/*
DATA SOURCE_CASE_MANAGE_ANSWER_OUT;
SET SOURCE_CASE_MANAGE_ANSWER_OUT;
LENGTH MAX_MSG_ANSWER_UID MAX_MSG_ANSWER_UID_IN_HIST 8;
RENAME _NAME_ = QUESTION_IDENTIFIER COL1 = ANSWER_TXT;
SEQ_NBR=0;

IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
RUN;
PROC SQL;
	UPDATE SOURCE_CASE_MANAGE_ANSWER_OUT SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;
 %ASSIGN_UID (SOURCE_CASE_MANAGE_ANSWER_OUT, MSG_ANSWER_UID);
DATA SOURCE_CASE_MANAGE_ANSWER_OUT;
SET SOURCE_CASE_MANAGE_ANSWER_OUT;
if MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID;
RUN;
%DBLOAD (MSG_ANSWER,SOURCE_CASE_MANAGE_ANSWER_OUT);
*/

PROC SQL;
CREATE TABLE SOURCE_ANSWER_INIT AS SELECT 
PHC_TEMPLATE.MSG_TEMPLATE_UID, 
PHC_TEMPLATE.CD,
MSG_CONTAINER_UID,
ANSWER_TXT,
NBS_QUESTION_UID,
NBS_CASE_ANSWER.NBS_QUESTION_UID, 
NBS_CASE_ANSWER.SEQ_NBR,
ANSWER_GROUP_SEQ_NBR
FROM  NBS_ODS.NBS_CASE_ANSWER
INNER JOIN PHC_TEMPLATE 
ON
	NBS_CASE_ANSWER.ACT_UID=PHC_TEMPLATE.PUBLIC_HEALTH_CASE_UID;
QUIT;
PROC SQL;
CREATE TABLE SOURCE_ANSWER_INITA AS SELECT DISTINCT
A.*,SOURCE_ANSWER_INIT.CD, CONDITION_CODE.INVESTIGATION_FORM_CD
FROM
SOURCE_ANSWER_INIT A
INNER JOIN NBS_SRT.CONDITION_CODE
ON CONDITION_CODE.CONDITION_CD = SOURCE_ANSWER_INIT.CD;

QUIT;
PROC SQL;
CREATE TABLE SOURCE_ANSWER_INITB AS SELECT DISTINCT
B.*,QUESTION_GROUP_SEQ_NBR,
NBS_UI_METADATA.QUESTION_IDENTIFIER 
FROM  SOURCE_ANSWER_INITA B
INNER JOIN NBS_ODS.NBS_UI_METADATA ON
NBS_UI_METADATA.INVESTIGATION_FORM_CD =SOURCE_ANSWER_INITA.INVESTIGATION_FORM_CD
AND NBS_UI_METADATA.NBS_QUESTION_UID = SOURCE_ANSWER_INITA.NBS_QUESTION_UID
ORDER BY
	MSG_TEMPLATE_UID;
QUIT;
%ASSIGNANDCREATE(SOURCE_ANSWER_INITB, METADATA, 0);

/*DATA SOURCE_ANSWER_INITB;
SET SOURCE_ANSWER_INITB;
LENGTH MAX_MSG_ANSWER_UID 8;
RUN;
PROC SQL;
	UPDATE SOURCE_ANSWER_INITB SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;

 %ASSIGN_UID (SOURCE_ANSWER_INITB, MSG_ANSWER_UID);
DATA SOURCE_ANSWER_INITB;
SET SOURCE_ANSWER_INITB;
if MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID;
RUN;
%DBLOAD (MSG_ANSWER,SOURCE_ANSWER_INITB);
 */
/*
%MACRO ASSIGNANDCREATE(DBTABLE, METADATA);
DATA &DBTABLE;
SET &DBTABLE;
LENGTH MAX_MSG_ANSWER_UID 8;
RENAME _NAME_ = QUESTION_IDENTIFIER;
IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
RUN;
%ASSIGN_UID (&DBTABLE, MSG_ANSWER_UID);
PROC SQL;
	UPDATE &DBTABLE SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;
DATA &DBTABLE;
SET &DBTABLE;
SEQ_NBR=0;
IF MAX_MSG_ANSWER_UID  ~=. THEN MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID _LABEL_;
RUN;


PROC SQL;
CREATE TABLE ANSWER AS SELECT DISTINCT
A.*,   
B.CODED_QUESTION FROM &DBTABLE A LEFT OUTER JOIN &METADATA B ON
A.QUESTION_IDENTIFIER=B.QUESTION_IDENTIFIER;
QUIT;

DATA ANSWER;
SET ANSWER;
IF LENGTHN(CODED_QUESTION) THEN ANSWER_TEXT =COMPRESS(COL1 || '^' || CODED_QUESTION);
ELSE ANSWER_TEXT =COMPRESS(COL1);
RUN;

%DBLOAD (MSG_ANSWER,ANSWER);
%MEND ASSIGNANDCREATE;
*/




PROC SQL;
CREATE TABLE NOTIFICATION_ENTITY_MAP AS
SELECT DISTINCT
 NOTIFICATION_CASE_MAP.MSG_CONTAINER_UID,
  NOTIFICATION_CASE_MAP.ACT_UID, PARTICIPATION.TYPE_CD, PARTICIPATION.SUBJECT_CLASS_CD,
  PARTICIPATION.SUBJECT_ENTITY_UID
  FROM NOTIFICATION_CASE_MAP
 INNER JOIN NBS_ODS.PARTICIPATION 
  ON NOTIFICATION_CASE_MAP.ACT_UID=PARTICIPATION.ACT_UID;
QUIT;

PROC SQL;
	CREATE TABLE PAT_TEMPLATE
	AS SELECT  MSG_CONTAINER_UID,PERSON_UID,PERSON.CD,
	ENTITY.CLASS_CD,  LAST_CHG_TIME, LOCAL_ID, 
	STATUS_CD, RECORD_STATUS_TIME AS STATUS_TIME 'STATUS_TIME' FROM 
NBS_ODS.PERSON INNER JOIN NOTIFICATION_ENTITY_MAP
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID=PERSON.PERSON_UID
INNER JOIN NBS_ODS.ENTITY
ON ENTITY.ENTITY_UID= PERSON.PERSON_UID
AND TYPE_CD='SubjOfPHC';
QUIT;
DATA PAT_TEMPLATE;
SET PAT_TEMPLATE;
LENGTH    MAX_MSG_TEMPLATE_UID MAX_MSG_TEMPLATE_UID_IN_HIST 8;
TYPE_CD =  'ENTITY';
SEQ_NBR=0;
RUN;

 %ASSIGN_UID (PAT_TEMPLATE, MSG_TEMPLATE_UID);
 %TEMPLATE(PAT_TEMPLATE);

PROC SQL;
DELETE FROM PAT_TEMPLATE WHERE PERSON_UID IS NULL;
RUN;
%DBLOAD (MSG_TEMPLATE,PAT_TEMPLATE );

PROC SQL;
CREATE TABLE PATIENT_INIT AS 
SELECT DISTINCT
PERSON.PERSON_UID,
PERSON.CURR_SEX_CD AS DEM113 'DEM113',
PERSON.BIRTH_GENDER_CD AS DEM114 'DEM114',
PERSON.BIRTH_TIME,
PERSON.MULTIPLE_BIRTH_IND AS DEM116 'DEM116',
PERSON.BIRTH_ORDER_NBR AS DEM117 'DEM117',
PERSON.AGE_REPORTED AS DEM118 'DEM118',
PERSON.AGE_REPORTED_UNIT_CD AS DEM119 'DEM119',
PERSON.AGE_REPORTED_TIME,
PERSON.BIRTH_TIME_CALC,
PERSON.DECEASED_IND_CD AS DEM127 'DEM127',
PERSON.DECEASED_TIME,
PERSON.MOTHERS_MAIDEN_NM AS DEM134 'DEM134',
PERSON.ADULTS_IN_HOUSE_NBR AS DEM135 'DEM135',
PERSON.CHILDREN_IN_HOUSE_NBR AS DEM136 'DEM136',
PERSON.EDUCATION_LEVEL_CD AS DEM137 'DEM137',
PERSON.OCCUPATION_CD AS DEM139 'DEM139',
PERSON.MARITAL_STATUS_CD AS DEM140 'DEM140',
PERSON.PRIM_LANG_CD AS DEM142 'DEM142',
PERSON.ETHNIC_GROUP_IND AS DEM155 'DEM155',
PERSON.DESCRIPTION AS DEM196 'DEM196',
PERSON.LOCAL_ID AS DEM197 'DEM197',
PERSON.AS_OF_DATE_SEX,
PERSON.AS_OF_DATE_MORBIDITY,
PERSON.AS_OF_DATE_GENERAL,
PERSON.AS_OF_DATE_ETHNICITY,
PERSON.AS_OF_DATE_ADMIN,
PERSON.AGE_REPORTED AS DEM216 'DEM216',
PERSON.AGE_REPORTED_TIME,
PERSON.AGE_REPORTED_UNIT_CD AS DEM218 'DEM218',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM 
NBS_ODS.PERSON INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=PERSON.PERSON_UID
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID;
QUIT;
DATA PATIENT_INIT;
SET PATIENT_INIT;
DEM115=put(datepart(BIRTH_TIME),yymmddd10.); 
DEM120=put(datepart(AGE_REPORTED_TIME),yymmddd10.); 
DEM121=put(datepart(BIRTH_TIME_CALC),yymmddd10.); 
DEM128=put(datepart(DECEASED_TIME),yymmddd10.); 
DEM207=put(datepart(AS_OF_DATE_SEX),yymmddd10.); 
DEM208=put(datepart(AS_OF_DATE_MORBIDITY),yymmddd10.); 
DEM209=put(datepart(AS_OF_DATE_GENERAL),yymmddd10.); 
DEM211=put(datepart(AS_OF_DATE_ETHNICITY),yymmddd10.); 
DEM215=put(datepart(AS_OF_DATE_ADMIN),yymmddd10.); 
DEM216=PUT(AGE_REPORTED,10.);
DEM217=put(datepart(AGE_REPORTED_TIME),yymmddd10.); 
DROP BIRTH_TIME AGE_REPORTED_TIME DECEASED_TIME AS_OF_DATE_SEX AS_OF_DATE_MORBIDITY AS_OF_DATE_MORBIDITY
AS_OF_DATE_GENERAL AS_OF_DATE_ETHNICITY AS_OF_DATE_ADMIN AGE_REPORTED AGE_REPORTED_TIME;
RUN; 
PROC TRANSPOSE DATA=PATIENT_INIT OUT=PATIENT_INIT_OUT;
var DEM113 DEM114 DEM115 DEM116 DEM117 DEM118 DEM119 DEM120 DEM121 DEM127 DEM128 DEM134 DEM135 DEM136 
DEM137 DEM139 DEM140 DEM142 DEM155 DEM196 DEM197 DEM207 DEM208 DEM209 DEM211 DEM215 DEM216 DEM217 DEM218;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID;
RUN;
%CHECKER(PATIENT_INIT_OUT, METADATA, 0);

PROC SQL;
CREATE TABLE PERSON_NAME AS 
SELECT DISTINCT
PERSON_NAME.PERSON_UID,
PERSON_NAME.FIRST_NM AS DEM250 'DEM250',
PERSON_NAME.NM_SUFFIX AS DEM107 'DEM107',
PERSON_NAME.NM_DEGREE AS DEM108 'DEM108',
PERSON_NAME.NM_USE_CD AS DEM100 'DEM100',
PERSON_NAME.NM_PREFIX AS DEM101 'DEM101',
PERSON_NAME.LAST_NM AS DEM102 'DEM102',
PERSON_NAME.LAST_NM2 AS DEM103 'DEM103',
PERSON_NAME.FIRST_NM AS DEM104 'DEM104',
PERSON_NAME.MIDDLE_NM AS DEM105 'DEM105',
PERSON_NAME.MIDDLE_NM2 AS DEM106 'DEM106',
PERSON_NAME.NM_SUFFIX AS DEM107 'DEM107',
PERSON_NAME.AS_OF_DATE,
PERSON_NAME_SEQ AS SEQ_NBR,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.PERSON_NAME 
INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=PERSON_NAME.PERSON_UID
ORDER BY
 MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID, SEQ_NBR;
QUIT;
DATA PERSON_NAME;
SET PERSON_NAME;
DEM206=put(datepart(AS_OF_DATE),yymmddd10.); 
RUN;

PROC TRANSPOSE DATA=PERSON_NAME OUT=PERSON_NAME_OUT;
var DEM250 DEM107 DEM108 DEM206;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID SEQ_NBR;
RUN;
data PERSON_NAME;
set PERSON_NAME;
ANSWER_GROUP_SEQ_NBR=1;
run;
%CHECKER(PERSON_NAME_OUT, METADATA, 0);
PROC SQL;
CREATE TABLE PERSON_RACE AS  
SELECT DISTINCT
PERSON_RACE.PERSON_UID,
PERSON_RACE.RACE_CATEGORY_CD AS DEM152 'DEM152',
PERSON_RACE.AS_OF_DATE,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.PERSON_RACE INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=PERSON_RACE.PERSON_UID
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID;
QUIT;
DATA PERSON_RACE;
SET PERSON_RACE;
DEM212=put(datepart(AS_OF_DATE),yymmddd10.); 
RUN;

PROC TRANSPOSE DATA=PERSON_RACE OUT=PERSON_RACE_OUT;
var DEM152 DEM212;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
data PERSON_RACE_OUT;
ANSWER_GROUP_SEQ_NBR=1;
set PERSON_RACE_OUT;
run;
%CHECKER(PERSON_RACE_OUT,  METADATA, 0);
PROC SQL;
CREATE TABLE PERSON_ETHNIC_GROUP AS 
SELECT DISTINCT
PERSON_ETHNIC_GROUP.PERSON_UID,
PERSON_ETHNIC_GROUP.ETHNIC_GROUP_CD AS DEM156 'DEM156',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.PERSON_ETHNIC_GROUP 
INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=PERSON_ETHNIC_GROUP.PERSON_UID
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID,PERSON_UID;
QUIT;
PROC TRANSPOSE DATA=PERSON_ETHNIC_GROUP OUT=PERSON_ETHNIC_GROUP_OUT;
var DEM156;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
%CHECKER(PERSON_ETHNIC_GROUP_OUT,  METADATA, 0);

PROC SQL;
CREATE TABLE PERSON_ENTITY AS  
SELECT DISTINCT
ENTITY_ID.ENTITY_UID AS PERSON_UID 'PERSON_UID',
ENTITY_ID.TYPE_CD AS DEM144 'DEM144',
ENTITY_ID.ASSIGNING_AUTHORITY_CD AS DEM146 'DEM146',
ENTITY_ID.ROOT_EXTENSION_TXT AS DEM147 'DEM147',
ENTITY_ID.AS_OF_DATE,
ENTITY_ID.VALID_TO_TIME,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_ID INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=ENTITY_ID.ENTITY_UID
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID,ENTITY_UID;
QUIT;
DATA PERSON_ENTITY;
SET PERSON_ENTITY;
DEM210=put(datepart(AS_OF_DATE),yymmddd10.); 
DEM223=put(datepart(VALID_TO_TIME),yymmddd10.); 
RUN;

PROC TRANSPOSE DATA=PERSON_ENTITY OUT=PERSON_ENTITY_OUT;
var DEM144 DEM146 DEM147 DEM210 DEM223;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
%CHECKER(PERSON_ENTITY_OUT, METADATA, 0);

PROC SQL;
CREATE TABLE PERSON_POSTAL AS  
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS PERSON_UID 'PERSON_UID',
ENTITY_LOCATOR_PARTICIPATION.CD AS DEM158 'DEM158',
POSTAL_LOCATOR.STREET_ADDR1 AS DEM159 'DEM159',
POSTAL_LOCATOR.STREET_ADDR2 AS DEM160 'DEM160',
POSTAL_LOCATOR.CITY_DESC_TXT AS DEM161 'DEM161',
POSTAL_LOCATOR.STATE_CD AS DEM162 'DEM162',
POSTAL_LOCATOR.ZIP_CD AS DEM163 'DEM163',
ENTITY_LOCATOR_PARTICIPATION.USE_CD AS DEM164 'DEM164',
POSTAL_LOCATOR.CNTY_CD AS DEM165 'DEM165',
ENTITY_LOCATOR_PARTICIPATION.CD_DESC_TXT AS DEM166 'DEM166',
POSTAL_LOCATOR.CNTRY_CD AS DEM167 'DEM167',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS DEM175 'DEM175',
POSTAL_LOCATOR.WITHIN_CITY_LIMITS_IND AS DEM237 'DEM237',
POSTAL_LOCATOR.CNTY_CD AS DEM248 'DEM248',
ENTITY_LOCATOR_PARTICIPATION.AS_OF_DATE,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_LOCATOR_PARTICIPATION INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.POSTAL_LOCATOR 
ON POSTAL_LOCATOR.POSTAL_LOCATOR_UID = ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID
WHERE  ENTITY_LOCATOR_PARTICIPATION.CD = 'H'
and ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST'
AND ENTITY_LOCATOR_PARTICIPATION.RECORD_STATUS_CD='ACTIVE'

ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID;
QUIT;
DATA PERSON_POSTAL;
SET PERSON_POSTAL;
DEM213=put(datepart(AS_OF_DATE),yymmddd10.); 
RUN;
PROC TRANSPOSE DATA=PERSON_POSTAL OUT=PERSON_POSTAL_OUT;
var DEM158 DEM159 DEM160 DEM161 DEM162 DEM163 DEM164 DEM165 DEM166 DEM167 DEM175 DEM213;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
data PERSON_POSTAL_OUT;
set PERSON_POSTAL_OUT;
ANSWER_GROUP_SEQ_NBR=1;
run;
%CHECKER(PERSON_POSTAL_OUT,  METADATA, 0);
PROC SQL;
CREATE TABLE PERSON_TELE AS  
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS PERSON_UID 'PERSON_UID',
ENTITY_LOCATOR_PARTICIPATION.CD AS DEM176 'DEM176',
TELE_LOCATOR.PHONE_NBR_TXT AS DEM177 'DEM177',
ENTITY_LOCATOR_PARTICIPATION.USE_CD AS DEM178 'DEM178',
TELE_LOCATOR.CNTRY_CD AS DEM180 'DEM180',
TELE_LOCATOR.EXTENSION_TXT AS DEM181 'DEM181',
TELE_LOCATOR.PHONE_NBR_TXT AS DEM251 'DEM251',
ENTITY_LOCATOR_PARTICIPATION.AS_OF_DATE,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_LOCATOR_PARTICIPATION INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON TELE_LOCATOR.TELE_LOCATOR_UID = ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID
 WHERE ENTITY_LOCATOR_PARTICIPATION.CD = 'PH'
and ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
and ENTITY_LOCATOR_PARTICIPATION.USE_CD='H'
AND ENTITY_LOCATOR_PARTICIPATION.RECORD_STATUS_CD='ACTIVE'

ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID;
QUIT;
DATA PERSON_TELE;
SET PERSON_TELE;
DEM214=put(datepart(AS_OF_DATE),yymmddd10.); 
RUN;
PROC TRANSPOSE DATA=PERSON_TELE OUT=PERSON_TELE_OUT;
var DEM176 DEM177 DEM178 DEM180 DEM181 DEM214;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
data PERSON_TELE_OUT;
set PERSON_TELE_OUT;
ANSWER_GROUP_SEQ_NBR=1;
run;
%CHECKER(PERSON_TELE_OUT, METADATA, 0);

PROC SQL;
CREATE TABLE PERSON_EMAIL AS  
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS PERSON_UID 'PERSON_UID',
TELE_LOCATOR.EMAIL_ADDRESS AS DEM182 'DEM182',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_LOCATOR_PARTICIPATION INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON TELE_LOCATOR.TELE_LOCATOR_UID = ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.CD = 'PH'
and ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
and ENTITY_LOCATOR_PARTICIPATION.USE_CD='H'
AND ENTITY_LOCATOR_PARTICIPATION.RECORD_STATUS_CD='ACTIVE'

ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID;
QUIT;
PROC TRANSPOSE DATA=PERSON_EMAIL OUT=PERSON_EMAIL_OUT;
VAR DEM182;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
data PERSON_EMAIL;
set PERSON_EMAIL;
ANSWER_GROUP_SEQ_NBR=1;
run;
%CHECKER(PERSON_EMAIL_OUT,  METADATA, 0);


PROC SQL;
CREATE TABLE PERSON_URL AS  
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS PERSON_UID 'PERSON_UID',
TELE_LOCATOR.URL_ADDRESS AS DEM183 'DEM183',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_LOCATOR_PARTICIPATION INNER JOIN PAT_TEMPLATE
ON PAT_TEMPLATE.PERSON_UID=ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON TELE_LOCATOR.TELE_LOCATOR_UID = ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.CD = 'PH'
and ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
and ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.RECORD_STATUS_CD='ACTIVE'
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PERSON_UID;
QUIT;

PROC TRANSPOSE DATA=PERSON_URL OUT=PERSON_URL_OUT;
var DEM183;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
data PERSON_URL_OUT;
set PERSON_URL_OUT;
ANSWER_GROUP_SEQ_NBR=1;
run;
%CHECKER(PERSON_URL_OUT, METADATA, 0);

/*------------------------*/

PROC SQL;
	CREATE TABLE PROV_TEMPLATE
	AS SELECT  MSG_CONTAINER_UID,PERSON_UID,PERSON.CD,
	ENTITY.CLASS_CD,  LAST_CHG_TIME, LOCAL_ID, 
	STATUS_CD, RECORD_STATUS_TIME AS STATUS_TIME 'STATUS_TIME' FROM 
NBS_ODS.PERSON INNER JOIN NOTIFICATION_ENTITY_MAP
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID=PERSON.PERSON_UID
INNER JOIN NBS_ODS.ENTITY
ON ENTITY.ENTITY_UID= PERSON.PERSON_UID
AND TYPE_CD='PhysicianOfPHC';
QUIT;
DATA PROV_TEMPLATE;
SET PROV_TEMPLATE;
LENGTH    MAX_MSG_TEMPLATE_UID MAX_MSG_TEMPLATE_UID_IN_HIST 8;
TYPE_CD =  'ENTITY';
SEQ_NBR=0;
RUN;
%ASSIGN_UID (PROV_TEMPLATE, MSG_TEMPLATE_UID);
 %TEMPLATE(PROV_TEMPLATE);
PROC SQL;
DELETE FROM PROV_TEMPLATE WHERE PERSON_UID IS NULL;
RUN;
%DBLOAD (MSG_TEMPLATE,PROV_TEMPLATE);
/*
DATA PROV_TEMPLATE;
SET PROV_TEMPLATE;
LENGTH REASON_FOR_TEST_DESC $2000;
LENGTH REASON_FOR_TEST_CD $50;
 
DO UNTIL(LAST.LAB_TEST_UID);
	SET OBS_REASON;
	BY LAB_TEST_UID NOTSORTED;
if(LENGTHN(COMPRESS(reason_desc_txt))> 0) and (LENGTHN(COMPRESS(reason_cd))> 0)
and (LENGTHN(COMPRESS(REASON_FOR_TEST_DESC))= 0) 
	then REASON_FOR_TEST_DESC= COMPRESS( reason_cd|| '(' || reason_desc_txt|| ')' || REASON_FOR_TEST_DESC) ;

END;
RUN;
*/

PROC SQL;
CREATE TABLE PROVIDER_BASE AS 
SELECT DISTINCT
PROV_TEMPLATE.PERSON_UID,
PERSON.LOCAL_ID	AS NPP001 'NPP001',
PERSON.DESCRIPTION AS NPP004 'NPP004',
PARTICIPATION.TYPE_CD AS NPP063 'NPP063',
PARTICIPATION.SUBJECT_CLASS_CD AS NPP064 'NPP064',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.PERSON 
INNER JOIN PROV_TEMPLATE
ON PROV_TEMPLATE.PERSON_UID=PERSON.PERSON_UID
INNER JOIN NBS_ODS.PARTICIPATION 
ON PARTICIPATION.SUBJECT_ENTITY_UID=PERSON.PERSON_UID
WHERE PARTICIPATION.TYPE_CD='PhysicianOfPHC'
ORDER BY
 MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PROV_TEMPLATE.PERSON_UID;
QUIT;

PROC TRANSPOSE DATA=PROVIDER_BASE OUT=PROVIDER_BASE_OUT;
VAR NPP001 NPP004 NPP063 NPP064;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
DATA PROVIDER_BASE_OUT;
SET PROVIDER_BASE_OUT;
SEQ_NBR=0;
RUN;
%CHECKER(PROVIDER_BASE_OUT, METADATA, 0);
PROC SQL;
CREATE TABLE PROVIDER_NAME AS 
SELECT DISTINCT
PERSON_NAME.PERSON_UID,
PERSON_NAME.FIRST_NM AS NPP008	'NPP008',
PERSON_NAME.LAST_NM AS NPP007 'NPP007',
PERSON_NAME.MIDDLE_NM AS NPP009 'NPP009',
PERSON_NAME.NM_DEGREE AS NPP060 'NPP060',
PERSON_NAME.NM_PREFIX AS NPP006 'NPP006',
PERSON_NAME.NM_SUFFIX AS NPP010 'NPP010',
PERSON_NAME.NM_USE_CD AS NPP005 'NPP005',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.PERSON_NAME 
INNER JOIN PROV_TEMPLATE
ON PROV_TEMPLATE.PERSON_UID=PERSON_NAME.PERSON_UID
ORDER BY
 MSG_CONTAINER_UID, MSG_TEMPLATE_UID, PROV_TEMPLATE.PERSON_UID;
QUIT;

PROC TRANSPOSE DATA=PROVIDER_NAME OUT=PROVIDER_NAME_OUT;
VAR NPP008 NPP007 NPP009 NPP060 NPP006 NPP010 NPP005 ;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
DATA PROVIDER_NAME_OUT;
SET PROVIDER_NAME_OUT;
SEQ_NBR=0;
RUN;
%CHECKER(PROVIDER_NAME_OUT, METADATA, 0);
PROC SQL;
CREATE TABLE PROVIDER_QEC AS  
SELECT DISTINCT
PROV_TEMPLATE.PERSON_UID,
ENTITY_ID.ASSIGNING_AUTHORITY_CD AS NPP059 'NPP059',
ENTITY_ID.ENTITY_ID_SEQ, 
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_ID INNER JOIN PROV_TEMPLATE
ON PROV_TEMPLATE.PERSON_UID=ENTITY_ID.ENTITY_UID
WHERE ENTITY_ID.TYPE_CD = 'QEC'
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID,PERSON_UID;
QUIT;
PROC TRANSPOSE DATA=PROVIDER_QEC OUT=PROVIDER_QEC_OUT;
var NPP059;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
DATA PROVIDER_QEC;
SET PROVIDER_QEC;
SEQ_NBR=PUT(ENTITY_ID_SEQ,10.);
RUN;
%CHECKER(PROVIDER_QEC_OUT, METADATA, 0);


PROC SQL;
CREATE TABLE PROVIDER_ENTITY_IDS AS  
SELECT DISTINCT
PROV_TEMPLATE.PERSON_UID,
ENTITY_ID.ASSIGNING_AUTHORITY_CD AS NPP012 'NPP012',
ENTITY_ID.ROOT_EXTENSION_TXT AS NPP014 'NPP014',
ENTITY_ID.TYPE_CD as NPP013 'NPP013', 
ENTITY_ID.ENTITY_ID_SEQ, 
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM NBS_ODS.ENTITY_ID INNER JOIN PROV_TEMPLATE
ON PROV_TEMPLATE.PERSON_UID=ENTITY_ID.ENTITY_UID
WHERE ENTITY_ID.TYPE_CD not in ( 'QEC')
ORDER BY
MSG_CONTAINER_UID, MSG_TEMPLATE_UID,PERSON_UID,ENTITY_ID_SEQ;
QUIT;
PROC TRANSPOSE DATA=PROVIDER_ENTITY_IDS OUT=PROVIDER_ENTITY_IDS_OUT;
var NPP012 NPP014 NPP013;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID ENTITY_ID_SEQ;
RUN;
DATA PROVIDER_QEC;
SET PROVIDER_QEC;
SEQ_NBR=PUT(ENTITY_ID_SEQ,10.);
RUN;
%CHECKER(PROVIDER_ENTITY_IDS_OUT, METADATA, 0);

PROC SQL;
CREATE TABLE PROV_POSTAL_LOCATOR AS
SELECT DISTINCT
PROV_TEMPLATE.PERSON_UID,
POSTAL_LOCATOR.CITY_DESC_TXT AS NPP020 'NPP020',             
POSTAL_LOCATOR.CNTRY_CD	AS NPP024 'NPP024',            
POSTAL_LOCATOR.CNTY_CD	AS NPP023 'NPP023',              
POSTAL_LOCATOR.STATE_CD	AS NPP021 'NPP021',               
POSTAL_LOCATOR.STREET_ADDR1 AS NPP018 'NPP018',
POSTAL_LOCATOR.STREET_ADDR2	AS NPP019 'NPP019',
POSTAL_LOCATOR.ZIP_CD  AS NPP022 'NPP022',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS NPP026 'NPP026',
ENTITY_LOCATOR_PARTICIPATION.USE_CD AS NPP017 'NPP017',
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM PROV_TEMPLATE 
INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROV_TEMPLATE.PERSON_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='O'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST'
INNER JOIN NBS_ODS.POSTAL_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=POSTAL_LOCATOR.POSTAL_LOCATOR_UID
ORDER BY MSG_CONTAINER_UID,MSG_TEMPLATE_UID,PERSON_UID;
QUIT;
PROC TRANSPOSE DATA=PROV_POSTAL_LOCATOR OUT=PROV_POSTAL_LOCATOR_OUT;
var NPP020 NPP024 NPP023 NPP021 NPP018 NPP019 NPP022 NPP026 NPP017;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
DATA PROV_POSTAL_LOCATOR_OUT;
SET PROV_POSTAL_LOCATOR_OUT;
SEQ_NBR=0;
ANSWER_GROUP_SEQ_NBR=1;
RUN;
%CHECKER(PROV_POSTAL_LOCATOR_OUT, METADATA, 0);


PROC SQL;
CREATE TABLE TELE_LOCATOR_OFFICE AS
SELECT DISTINCT
PROV_TEMPLATE.PERSON_UID,
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
ENTITY_LOCATOR_PARTICIPATION.USE_CD AS NPP028 'NPP028',
TELE_LOCATOR.EXTENSION_TXT AS NPP031 'NPP031',        
TELE_LOCATOR.PHONE_NBR_TXT AS NPP030 'NPP030', 
TELE_LOCATOR.EMAIL_ADDRESS AS NPP032 'NPP032',
TELE_LOCATOR.CNTRY_CD AS NPP029 'NPP029',    
TELE_LOCATOR.URL_ADDRESS AS NPP033 'NPP033',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS NPP036 'NPP036',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM PROV_TEMPLATE INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROV_TEMPLATE.PERSON_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='PH'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
ORDER BY MSG_CONTAINER_UID,MSG_TEMPLATE_UID,PERSON_UID;
QUIT;
PROC TRANSPOSE DATA=TELE_LOCATOR_OFFICE OUT=TELE_LOCATOR_OFFICE_OUT;
var NPP028 NPP031 NPP030 NPP032 NPP029 NPP033 NPP036;
BY MSG_CONTAINER_UID MSG_TEMPLATE_UID PERSON_UID;
RUN;
DATA TELE_LOCATOR_OFFICE_OUT;
SET TELE_LOCATOR_OFFICE_OUT;
SEQ_NBR=0;
ANSWER_GROUP_SEQ_NBR=1;
RUN;
%CHECKER(TELE_LOCATOR_OFFICE_OUT, METADATA, 0);

PROC SQL;
	CREATE TABLE INT_TEMPLATE
	AS SELECT  MSG_CONTAINER_UID,INTERVIEW_UID,
	CLASS_CD, MOOD_CD,  LAST_CHG_TIME, LOCAL_ID, 
	RECORD_STATUS_TIME AS STATUS_TIME 'STATUS_TIME' FROM NOTIFICATION_SUB_ACT_MAP
	INNER JOIN NBS_ODS.INTERVIEW 
	ON INTERVIEW.INTERVIEW_UID = NOTIFICATION_SUB_ACT_MAP.ACT_UID
	INNER JOIN NBS_ODS.ACT 
	ON ACT.ACT_UID = INTERVIEW.INTERVIEW_UID;
QUIT;
DATA INT_TEMPLATE;
SET INT_TEMPLATE;
LENGTH    MAX_MSG_TEMPLATE_UID 8;
TYPE_CD =  'ACT';
SEQ_NBR=0;
RUN;

 %ASSIGN_UID (INT_TEMPLATE, MSG_TEMPLATE_UID);
 PROC SQL;
	UPDATE INT_TEMPLATE SET MAX_MSG_TEMPLATE_UID = (SELECT MAX(MSG_TEMPLATE_UID) FROM NBS_MSG.MSG_TEMPLATE);

DATA INT_TEMPLATE;
SET INT_TEMPLATE;
if MAX_MSG_TEMPLATE_UID ~=. then MSG_TEMPLATE_UID= MSG_TEMPLATE_UID+MAX_MSG_TEMPLATE_UID-1;
DROP MAX_MSG_TEMPLATE_UID;
RUN;
PROC SQL;
DELETE FROM INT_TEMPLATE WHERE INTERVIEW_UID IS NULL;
RUN;
%DBLOAD (MSG_TEMPLATE,INT_TEMPLATE );


PROC SQL;
CREATE TABLE SOURCE_INT_ANSWER AS SELECT
INTERVIEW.INTERVIEW_UID, 
INTERVIEW.INTERVIEW_DATE,
INTERVIEW.INTERVIEW_LOC_CD AS IXS106 'IXS106',
INTERVIEW.INTERVIEW_STATUS_CD AS IXS100 'IXS100',
INTERVIEW.INTERVIEW_TYPE_CD AS IXS105 'IXS105',
INTERVIEW.INTERVIEWEE_ROLE_CD AS IXS103 'IXS103',
MSG_CONTAINER_UID,
MSG_TEMPLATE_UID
FROM  NBS_ODS.INTERVIEW
INNER JOIN INT_TEMPLATE 
ON INTERVIEW.INTERVIEW_UID=INT_TEMPLATE.INTERVIEW_UID
ORDER BY MSG_CONTAINER_UID, MSG_TEMPLATE_UID;
QUIT;
DATA SOURCE_INT_ANSWER;
SET SOURCE_INT_ANSWER;
	IXS101= PUT(DATEPART(INTERVIEW_DATE),YYMMDDD10.);
	SEQ_NBR=0;
RUN;

PROC TRANSPOSE DATA=SOURCE_INT_ANSWER OUT=SOURCE_INT_ANSWER_OUT;
var IXS106 IXS100  IXS105 IXS103  IXS101;
	BY MSG_CONTAINER_UID MSG_TEMPLATE_UID;
RUN;
%CHECKER(SOURCE_INT_ANSWER_OUT, METADATA, 0);

/*DATA SOURCE_INT_ANSWER_OUT;
SET SOURCE_INT_ANSWER_OUT;
LENGTH MAX_MSG_ANSWER_UID 8;
RENAME _NAME_ = QUESTION_IDENTIFIER COL1 = ANSWER_TXT;
IF LENGTHN(COMPRESS(COL1))<=0  THEN DELETE;
IF COMPRESS(COL1)='.'  THEN DELETE;
DROP INTERVIEW_UID;
RUN;
PROC SQL;
	UPDATE SOURCE_INT_ANSWER_OUT SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;
 %ASSIGN_UID (SOURCE_INT_ANSWER_OUT, MSG_ANSWER_UID);


DATA SOURCE_INT_ANSWER_OUT;
SET SOURCE_INT_ANSWER_OUT;
SEQ_NBR=0;
if MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID;
RUN;
%DBLOAD (MSG_ANSWER,SOURCE_INT_ANSWER_OUT);
*/

PROC SQL;
CREATE TABLE SOURCE_ANSWER_INIT AS SELECT 
INT_TEMPLATE.MSG_TEMPLATE_UID, 
MSG_CONTAINER_UID,
ANSWER_TXT,
NBS_QUESTION_UID,
NBS_ANSWER.NBS_QUESTION_UID, 
NBS_ANSWER.SEQ_NBR,
ANSWER_GROUP_SEQ_NBR
FROM  NBS_ODS.NBS_ANSWER
INNER JOIN INT_TEMPLATE 
ON
	NBS_ANSWER.ACT_UID=INT_TEMPLATE.INTERVIEW_UID;
QUIT;
PROC SQL;
CREATE TABLE SOURCE_ANSWER_INITA AS SELECT DISTINCT 
	A.*,QUESTION_GROUP_SEQ_NBR,
	NBS_UI_METADATA.QUESTION_IDENTIFIER 
FROM  SOURCE_ANSWER_INIT A
INNER JOIN NBS_ODS.NBS_UI_METADATA ON
NBS_UI_METADATA.NBS_QUESTION_UID = SOURCE_ANSWER_INIT.NBS_QUESTION_UID
WHERE DATA_LOCATION='NBS_ANSWER.ANSWER_TXT'
ORDER BY
	MSG_TEMPLATE_UID;
QUIT;
/*
DATA SOURCE_ANSWER_INITA;
SET SOURCE_ANSWER_INITA; 
LENGTH MAX_MSG_ANSWER_UID 8;
RUN;
PROC SQL;
	UPDATE SOURCE_ANSWER_INITA SET MAX_MSG_ANSWER_UID = (SELECT MAX(MSG_ANSWER_UID) FROM NBS_MSG.MSG_ANSWER);
QUIT;

 %ASSIGN_UID (SOURCE_ANSWER_INITA, MSG_ANSWER_UID);
DATA SOURCE_ANSWER_INITA;
SET SOURCE_ANSWER_INITA;
if MAX_MSG_ANSWER_UID  ~=. then MSG_ANSWER_UID= MAX_MSG_ANSWER_UID+MSG_ANSWER_UID-1;
DROP MAX_MSG_ANSWER_UID;
RUN;
%DBLOAD (MSG_ANSWER,SOURCE_ANSWER_INITA);
*/
%CHECKER(SOURCE_ANSWER_INITA, METADATA, 0);
PROC SQL;
UPDATE NBS_ODS.NOTIFICATION SET RECORD_STATUS_CD ='COMPLETED' 
WHERE NOTIFICATION_UID IN (SELECT
NOTIFICATION_UID FROM MSG_CONTAINER);
QUIT;
PROC SQL;
UPDATE NBS_MSG.MSG_CONTAINER SET RECORD_STATUS_CD ='COMPLETED' 
WHERE RECORD_STATUS_CD ='APPROVED';
QUIT;

 